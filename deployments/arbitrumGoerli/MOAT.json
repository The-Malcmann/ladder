{
  "address": "0x94B1991B6C1f8ABfBa55B9D4Db535f5D06a9AaA3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILBRouter",
          "name": "joeRouter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "native_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_xPerBin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "devWallet_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "founderWallet_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Uint256x256Math__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "binStep",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pct",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "rebalances",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "fees",
          "type": "bool"
        }
      ],
      "name": "disableRebalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "floorLiquidityBin",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveBinId",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        }
      ],
      "name": "getAverageTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFloorPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair_",
          "type": "address"
        },
        {
          "internalType": "int256[]",
          "name": "deltaIds",
          "type": "int256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "distributionX",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "distributionY",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeRouter",
      "outputs": [
        {
          "internalType": "contract ILBRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRecordedActiveBin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBin",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract ILBPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancesEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seedLiquidityTimes",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        }
      ],
      "name": "setNewVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBin",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tightLiqBin",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xPerBin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf7ab2fb9047c91599557e83ea0458e8c8e7d3fd5b0ea4b5b84e8da064a424fbe",
  "receipt": {
    "to": null,
    "from": "0x508DDE1109C6A0E7552bb083B89D540F80Db95d3",
    "contractAddress": "0x94B1991B6C1f8ABfBa55B9D4Db535f5D06a9AaA3",
    "transactionIndex": 1,
    "gasUsed": "5557534",
    "logsBloom": "0x
    "blockHash": "0xecfe86217ea357225652d8f9ae171e94e565831e9e437a59f055fab3d714d632",
    "transactionHash": "0xf7ab2fb9047c91599557e83ea0458e8c8e7d3fd5b0ea4b5b84e8da064a424fbe",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 19330007,
        "transactionHash": "0xf7ab2fb9047c91599557e83ea0458e8c8e7d3fd5b0ea4b5b84e8da064a424fbe",
        "address": "0x94B1991B6C1f8ABfBa55B9D4Db535f5D06a9AaA3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000508dde1109c6a0e7552bb083b89d540f80db95d3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xecfe86217ea357225652d8f9ae171e94e565831e9e437a59f055fab3d714d632"
      }
    ],
    "blockNumber": 19330007,
    "cumulativeGasUsed": "5557534",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x095EEe81B0eC73797424d67e24adab20D5A5D307",
    "0xe91C134fd945cC0723fd3eB2C0AbEe2188fc33E7",
    30000000,
    100000,
    "0xa9B2870be6c52D36F680c5f26c277cB91Bc12bca",
    "0x5140780e32d84a3ddF2feBE31fFA0741c1a515E1"
  ],
  "numDeployments": 1,
  "solcInputHash": "8dff7e2ad4b77b583586b811477c1941",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILBRouter\",\"name\":\"joeRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"native_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xPerBin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"founderWallet_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Uint256x256Math__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"binStep\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"rebalances\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fees\",\"type\":\"bool\"}],\"name\":\"disableRebalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorLiquidityBin\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveBinId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"getAverageTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFloorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair_\",\"type\":\"address\"},{\"internalType\":\"int256[]\",\"name\":\"deltaIds\",\"type\":\"int256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionX\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionY\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeRouter\",\"outputs\":[{\"internalType\":\"contract ILBRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRecordedActiveBin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBin\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract ILBPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedLiquidityTimes\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"setNewVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBin\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tightLiqBin\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xPerBin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"disableRebalances(bool,bool)\":{\"params\":{\"fees\":\"bool fees enabled?\",\"rebalances\":\"bool rebalances enabled?.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"burnFee\":{\"details\":\"updated fee breakdown\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approvals()\":{\"notice\":\"approvals for joe router.\"},\"disableRebalances(bool,bool)\":{\"notice\":\"only admin function to disable rebalances and fees in case of bugs.\"},\"getActiveBinId()\":{\"notice\":\"Get's the pool active bin id.\"},\"getAverageTokenPrice(uint256,uint256)\":{\"notice\":\"Helper func.\"},\"getFloorPrice()\":{\"notice\":\"returns the current floor price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/moat/MOAT.sol\":\"MOAT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa80cb30fccbba7c8ff72ac82cc898576a78d4c3031e85676840048f3fe195f5d\",\"license\":\"MIT\"},\"contracts/moat/MOAT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {SafeTransferLib} from \\\"../solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {ERC20} from \\\"../solmate/src/tokens/ERC20.sol\\\";\\n\\nimport \\\"../@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILBPair.sol\\\";\\nimport \\\"./interfaces/ILBRouter.sol\\\";\\nimport \\\"./interfaces/ILBToken.sol\\\";\\nimport \\\"../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./libraries/Constants.sol\\\";\\nimport {PriceHelper} from \\\"./libraries/PriceHelper.sol\\\";\\n\\ncontract MOAT is ERC20, Ownable {\\n    using SafeTransferLib for address payable;\\n    using SafeMath for uint256;\\n    using PriceHelper for uint256;\\n\\n    ILBRouter public joeRouter;\\n    ILBPair public pair;\\n    address public vault; //staking contract\\n    address public immutable NATIVE; //weth\\n    address private founderWallet;\\n    address private devWallet;\\n\\n    bool public rebalancesEnabled;\\n    bool public feesEnabled;\\n    bool isRebalancing;\\n\\n    // JOE LIQ\\n    uint16 public binStep; //bin steps\\n    uint24 public startBin; //starting bin\\n    uint256 public lastRecordedActiveBin; //recorded bin to know where rebalances occur.\\n    uint24 public maxBin; //this is the last bin where we have liq\\n    uint256 public xPerBin; //xToken amount per bin\\n\\n    uint24 public floorLiquidityBin; //the floor where bin liquidity sits.\\n    uint24 public tightLiqBin; //bin for active trading\\n\\n    /// @dev updated fee breakdown\\n    uint256 public burnFee = 40; //4%\\n    uint256 public stakeFee = 60; //6%\\n\\n    uint24 public seedLiquidityTimes; //for initialize function\\n\\n    uint256 public maxSupply;\\n\\n    // @dev blacklisting dexes to only provision liq to traderjoe\\n    // give me a mapping of address to bool\\n    mapping(address => bool) public blacklist;\\n\\n    constructor(\\n        ILBRouter joeRouter_,\\n        address native_,\\n        uint256 maxSupply_,\\n        uint256 _xPerBin,\\n        address devWallet_,\\n        address founderWallet_\\n    )\\n        ERC20(\\\"MOAT\\\", \\\"MOAT\\\", 18)\\n    {\\n        address uniswapv3 = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n        address sushiswap = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\\n        address sushiswapTrident = 0xD9988b4B5bBC53A794240496cfA9Bf5b1F8E0523;\\n        address balancer = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n        address camelot = 0xc873fEcbd354f5A56E00E710B90EF4201db2448d;\\n        blacklist[uniswapv3] = true;\\n        blacklist[sushiswap] = true;\\n        blacklist[sushiswapTrident] = true;\\n        blacklist[balancer] = true;\\n        blacklist[camelot] = true;\\n\\n        joeRouter = joeRouter_;\\n        NATIVE = native_;\\n        devWallet = devWallet_;\\n        founderWallet = founderWallet_;\\n\\n        maxSupply = maxSupply_ * 1 ether;\\n        rebalancesEnabled = true;\\n        feesEnabled = true;\\n        xPerBin = _xPerBin * 1 ether;\\n    }\\n\\n    modifier rebalanceAllowed() {\\n        if (binStep == 0 || floorLiquidityBin == getActiveBinId()) {\\n            revert(\\\"At floor\\\");\\n        }\\n\\n        if (getActiveBinId() - lastRecordedActiveBin > 2 && rebalancesEnabled) {\\n            _;\\n        } else {\\n            revert(\\\"Out of range\\\");\\n        }\\n    }\\n\\n    //====================================================================================================================\\n    // Initialize functions - messy cause developed via hackaton and would run out of gas otherwise. works on my machine.\\n    //====================================================================================================================\\n\\n    function initialize(\\n        address pair_,\\n        int256[] memory deltaIds,\\n        uint256[] memory distributionX,\\n        uint256[] memory distributionY,\\n        address _vault\\n    ) external payable onlyOwner {\\n        require(seedLiquidityTimes < 4, \\\"initialized\\\");\\n\\n        if (seedLiquidityTimes == 0) {\\n            vault = _vault;\\n            pair = ILBPair(pair_);\\n\\n            binStep = pair.getBinStep();\\n\\n            startBin = getActiveBinId();\\n            lastRecordedActiveBin = getActiveBinId() + 1; // add one because it's where our liquidity sits\\n\\n            approvals();\\n\\n            maxBin = getActiveBinId() + 300;\\n        }\\n\\n        _mint(address(this), maxSupply / 3);\\n\\n        isRebalancing = true;\\n        addLiquidity(deltaIds, distributionX, distributionY, getActiveBinId());\\n        isRebalancing = false;\\n\\n        seedLiquidityTimes = seedLiquidityTimes + 1;\\n    }\\n\\n    //=============================================================================\\n    // Rebalance\\n    //=============================================================================\\n\\n    // Rebalance liquidity\\n    function rebalanceLiquidity() external rebalanceAllowed {\\n        isRebalancing = true;\\n\\n        removeLiquidity();\\n\\n        uint256 totalEthInContract = IERC20(NATIVE).balanceOf(address(this));\\n\\n        uint256 totalLotusInPool = (maxBin - (getActiveBinId() + 1)) * xPerBin;\\n\\n        uint256 totalCirculatingSupply = totalSupply -\\n            (totalLotusInPool +\\n                balanceOf[0x000000000000000000000000000000000000dEaD]);\\n\\n        uint256 newFloorPrice = getAverageTokenPrice(\\n            totalEthInContract,\\n            totalCirculatingSupply\\n        );\\n\\n        uint24 expectedFloorBin = joeRouter.getIdFromPrice(\\n            pair,\\n            newFloorPrice.convertDecimalPriceTo128x128()\\n        );\\n\\n        floorLiquidityBin = expectedFloorBin > getActiveBinId()\\n            ? getActiveBinId() - 1\\n            : expectedFloorBin;\\n\\n        int256 deltaForMainLiq = -(int24(getActiveBinId()) -\\n            int256(int24(floorLiquidityBin)));\\n\\n        tightLiqBin = getActiveBinId() - 1;\\n\\n        int256[] memory deltaIds = new int256[](2);\\n        deltaIds[0] = deltaForMainLiq;\\n        deltaIds[1] = -1;\\n\\n        uint256[] memory distributionX = new uint256[](2);\\n        distributionX[0] = 0;\\n        distributionX[1] = 0;\\n\\n        uint256[] memory distributionY = new uint256[](2);\\n\\n        // @dev changed %'s\\n        distributionY[0] = (Constants.PRECISION * 80) / 100;\\n        distributionY[1] = (Constants.PRECISION * 20) / 100;\\n\\n        addLiquidity(deltaIds, distributionX, distributionY, getActiveBinId());\\n\\n        isRebalancing = false;\\n    }\\n\\n    //if we finish lotus side supply in the pool, burns happen so floor can still go up, need dedicated rebalance\\n    function rebalanceMax() external {\\n        require(\\n            getActiveBinId() > maxBin && rebalancesEnabled,\\n            \\\"Not there yet\\\"\\n        );\\n\\n        isRebalancing = true;\\n\\n        // step 1 remove liquidity only from the floor bin\\n        uint256[] memory amounts = new uint256[](1);\\n        uint256[] memory ids = new uint256[](1);\\n\\n        ids[0] = floorLiquidityBin;\\n        amounts[0] = pair.balanceOf(address(this), ids[0]);\\n\\n        pair.burn(address(this), address(this), ids, amounts);\\n\\n        // step 2 calculate new floor price and add liq to that price\\n        uint256 totalEthInContract = IERC20(NATIVE).balanceOf(address(this));\\n\\n        uint256 totalLotusInPool = 0; // 0 because we finished our range\\n\\n        uint256 totalCirculatingSupply = totalSupply -\\n            (totalLotusInPool +\\n                balanceOf[0x000000000000000000000000000000000000dEaD]);\\n\\n        uint256 newFloorPrice = getAverageTokenPrice(\\n            totalEthInContract,\\n            totalCirculatingSupply\\n        );\\n\\n        uint24 expectedFloorBin = joeRouter.getIdFromPrice(\\n            pair,\\n            newFloorPrice.convertDecimalPriceTo128x128()\\n        );\\n\\n        require(expectedFloorBin > floorLiquidityBin, \\\"no\\\");\\n\\n        floorLiquidityBin = expectedFloorBin > getActiveBinId()\\n            ? getActiveBinId() - 1\\n            : expectedFloorBin;\\n\\n        int256 deltaForMainLiq = -(int24(getActiveBinId()) -\\n            int256(int24(floorLiquidityBin)));\\n\\n        int256[] memory deltaIds = new int256[](1);\\n        deltaIds[0] = deltaForMainLiq;\\n\\n        uint256[] memory distributionX = new uint256[](1);\\n        distributionX[0] = 0;\\n\\n        uint256[] memory distributionY = new uint256[](1);\\n\\n        distributionY[0] = Constants.PRECISION;\\n\\n        addLiquidity(deltaIds, distributionX, distributionY, getActiveBinId());\\n\\n        isRebalancing = false;\\n\\n        require(IERC20(NATIVE).balanceOf(address(this)) < 1 ether, \\\"failed\\\");\\n    }\\n\\n    function removeLiquidity() internal {\\n        bool isInsideRange = false;\\n\\n        uint256 numberOfBinsToWithdraw = (getActiveBinId() -\\n            lastRecordedActiveBin);\\n\\n        numberOfBinsToWithdraw = floorLiquidityBin == 0\\n            ? numberOfBinsToWithdraw\\n            : numberOfBinsToWithdraw + 1;\\n\\n        if (\\n            tightLiqBin >= lastRecordedActiveBin &&\\n            tightLiqBin <= lastRecordedActiveBin + numberOfBinsToWithdraw\\n        ) {\\n            isInsideRange = true;\\n        } else {\\n            if (floorLiquidityBin > 0) {\\n                isInsideRange = false;\\n                numberOfBinsToWithdraw++;\\n            }\\n        }\\n\\n        uint256[] memory amounts = new uint256[](numberOfBinsToWithdraw);\\n        uint256[] memory ids = new uint256[](numberOfBinsToWithdraw);\\n\\n        for (uint256 i; i < numberOfBinsToWithdraw; i++) {\\n            ids[i] = lastRecordedActiveBin + i;\\n        }\\n\\n        if (floorLiquidityBin != 0) {\\n            ids[ids.length - 1] = floorLiquidityBin;\\n\\n            if (!isInsideRange) ids[numberOfBinsToWithdraw - 2] = tightLiqBin;\\n        }\\n\\n        lastRecordedActiveBin = getActiveBinId();\\n\\n        for (uint256 i; i < numberOfBinsToWithdraw; i++) {\\n            uint256 LBTokenAmount = pair.balanceOf(address(this), ids[i]);\\n\\n            amounts[i] = LBTokenAmount;\\n        }\\n\\n        pair.burn(address(this), address(this), ids, amounts);\\n    }\\n\\n    function addLiquidity(\\n        int256[] memory deltaIds,\\n        uint256[] memory distributionX,\\n        uint256[] memory distributionY,\\n        uint24 activeIdDesired\\n    ) internal {\\n        uint256 amountX = balanceOf[address(this)];\\n        uint256 amountY = IERC20(NATIVE).balanceOf(address(this));\\n\\n        uint256 amountXmin = (amountX * 99) / 100; // We allow 1% amount slippage\\n        uint256 amountYmin = (amountY * 99) / 100; // We allow 1% amount slippage\\n\\n        uint256 idSlippage = 0;\\n\\n        ILBRouter.LiquidityParameters memory liquidityParameters = ILBRouter\\n            .LiquidityParameters(\\n                IERC20(address(this)),\\n                IERC20(NATIVE),\\n                binStep,\\n                amountX,\\n                amountY,\\n                amountXmin,\\n                amountYmin,\\n                activeIdDesired, //activeIdDesired\\n                idSlippage,\\n                deltaIds,\\n                distributionX,\\n                distributionY,\\n                address(this),\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        joeRouter.addLiquidity(liquidityParameters);\\n    }\\n\\n    //=============================================================================\\n    // Tax and transfer mechanism\\n    //=============================================================================\\n\\n    /**\\n     * @notice charge tax on sells and buys functions.\\n     *     @return _amount remaining to the sender\\n     */\\n\\n    function chargeTax(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256 _amount) {\\n        _amount = amount;\\n        if (feesEnabled && !isRebalancing) {\\n            // buy tax\\n            if (from == address(pair) && to != (address(this))) {\\n                // todo: figure out fee split\\n                uint256 devFee = calculateFee(_amount, 15); // 1.5%\\n                uint256 founderFee = calculateFee(_amount, 10); // 1%\\n\\n                balanceOf[devWallet] += devFee;\\n                emit Transfer(from, devWallet, devFee);\\n\\n                balanceOf[founderWallet] += founderFee;\\n                emit Transfer(from, founderWallet, founderFee);\\n\\n                _amount -= devFee;\\n                _amount -= founderFee;\\n            }\\n\\n            // sell tax\\n            if (from == address(joeRouter) && to == address(pair)) {\\n                uint256 sendToVault;\\n                if (getActiveBinId() == floorLiquidityBin) {\\n                    sendToVault = calculateFee(_amount, (stakeFee + burnFee));\\n                    balanceOf[vault] += sendToVault;\\n                    emit Transfer(from, vault, sendToVault);\\n\\n                    _amount -= sendToVault;\\n                } else {\\n                    uint256 burn = calculateFee(_amount, burnFee);\\n                    sendToVault = calculateFee(_amount, stakeFee);\\n\\n                    balanceOf[vault] += sendToVault;\\n                    emit Transfer(from, vault, sendToVault);\\n\\n                    unchecked {\\n                        totalSupply -= burn;\\n                    }\\n                    emit Transfer(from, address(0), burn);\\n\\n                    _amount -= (sendToVault + burn);\\n                }\\n            }\\n        }\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        uint256 _amount = chargeTax(msg.sender, to, amount);\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += _amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, _amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        // @dev check that to and from aren't on blacklist\\n        require(\\n            !blacklist[to] && !blacklist[from],\\n            \\\"error: invalid liquidity pool\\\"\\n        );\\n\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) {\\n            allowance[from][msg.sender] = allowed - amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        uint256 _amount = chargeTax(msg.sender, to, amount);\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += _amount;\\n        }\\n\\n        emit Transfer(from, to, _amount);\\n\\n        return true;\\n    }\\n\\n    //=============================================================================\\n    // Helpers\\n    //=============================================================================\\n\\n    function calculateFee(\\n        uint256 amount,\\n        uint256 pct\\n    ) public pure returns (uint256) {\\n        uint256 feePercentage = Constants.PRECISION.mul(pct).div(1000); // x pct\\n        return amount.mul(feePercentage).div(Constants.PRECISION);\\n    }\\n\\n    /**\\n     * @notice Helper func.\\n     */\\n    function getAverageTokenPrice(\\n        uint256 totalETH,\\n        uint256 totalTokens\\n    ) public pure returns (uint256) {\\n        require(totalETH < totalTokens, \\\"ETH must be less than total tokens\\\");\\n\\n        return (totalETH * Constants.PRECISION) / (totalTokens);\\n    }\\n\\n    /**\\n     * @notice returns the current floor price\\n     */\\n    function getFloorPrice() public view returns (uint256) {\\n        return joeRouter.getPriceFromId(pair, floorLiquidityBin);\\n    }\\n\\n    /**\\n     * @notice Get's the pool active bin id.\\n     */\\n    function getActiveBinId() public view returns (uint24) {\\n        return pair.getActiveId();\\n    }\\n\\n    function feeReceiver() public view returns (address) {\\n        return owner();\\n    }\\n\\n    //=============================================================================\\n    // ADMIN\\n    //=============================================================================\\n\\n    /**\\n     * @notice approvals for joe router.\\n     */\\n    function approvals() public onlyOwner {\\n        allowance[address(this)][address(joeRouter)] = 2 ** 256 - 1;\\n        IERC20(NATIVE).approve(address(joeRouter), 2 ** 256 - 1);\\n\\n        ILBToken(address(pair)).approveForAll(address(joeRouter), true);\\n        ILBToken(address(pair)).approveForAll(address(pair), true);\\n    }\\n\\n    /**\\n     * @notice only admin function to disable rebalances and fees in case of bugs.\\n     *     @param rebalances bool rebalances enabled?.\\n     *     @param fees bool fees enabled?\\n     */\\n    function disableRebalances(bool rebalances, bool fees) external onlyOwner {\\n        rebalancesEnabled = rebalances;\\n        feesEnabled = fees;\\n    }\\n\\n    // in case of bugs in the staking contract we send to a new vault\\n    function setNewVault(address newVault) external onlyOwner {\\n        vault = newVault;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x9c52b91e4cb9786dd6838f94a307283e245fd54b014af6ae38239d04a7d5a628\",\"license\":\"MIT\"},\"contracts/moat/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/// @title Joe V1 Factory Interface\\n/// @notice Interface to interact with Joe V1 Factory\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x7ba524c998b232940e31bb23442fbd169b713139a7c3732c230fdc2f1cfca95f\",\"license\":\"GPL-3.0\"},\"contracts/moat/interfaces/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/**\\n * @title Liquidity Book Factory Interface\\n * @author Trader Joe\\n * @notice Required interface of LBFactory contract\\n */\\ninterface ILBFactory is IPendingOwnable {\\n    error LBFactory__IdenticalAddresses(IERC20 token);\\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__AddressZero();\\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\n    error LBFactory__BinStepTooLow(uint256 binStep);\\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\\n    error LBFactory__SameFeeRecipient(address feeRecipient);\\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\n    error LBFactory__SameImplementation(address LBPairImplementation);\\n    error LBFactory__ImplementationNotSet();\\n\\n    /**\\n     * @dev Structure to store the LBPair information, such as:\\n     * binStep: The bin step of the LBPair\\n     * LBPair: The address of the LBPair\\n     * createdByOwner: Whether the pair was created by the owner of the factory\\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n     */\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function getMinBinStep() external pure returns (uint256);\\n\\n    function getFeeRecipient() external view returns (address);\\n\\n    function getMaxFlashLoanFee() external pure returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getLBPairImplementation() external view returns (address);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint256 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            bool isOpen\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address lbPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        bool isOpen\\n    ) external;\\n\\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBPair lbPair) external;\\n}\\n\",\"keccak256\":\"0x436bd62dcc69fe2289b9773ceb1097b4c82e08ac582a0a6f4a727ed87ddad343\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x95b7da167c9c93541135f07dda11378b5cb2f3b8ac272f166bc5286fc12f0130\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBLegacyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/// @title Liquidity Book Factory Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBFactory contract\\ninterface ILBLegacyFactory is IPendingOwnable {\\n    /// @dev Structure to store the LBPair information, such as:\\n    /// - binStep: The bin step of the LBPair\\n    /// - LBPair: The address of the LBPair\\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBLegacyPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBLegacyPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event FeeParametersSet(\\n        address indexed sender,\\n        ILBLegacyPair indexed LBPair,\\n        uint256 binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event FactoryLockedStatusUpdated(bool unlocked);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBLegacyPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator,\\n        uint256 sampleLifetime\\n    );\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function MAX_FEE() external pure returns (uint256);\\n\\n    function MIN_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_PROTOCOL_SHARE() external pure returns (uint256);\\n\\n    function LBPairImplementation() external view returns (address);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAsset(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function flashLoanFee() external view returns (uint256);\\n\\n    function creationUnlocked() external view returns (bool);\\n\\n    function allLBPairs(uint256 id) external returns (ILBLegacyPair);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint16 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            uint256 sampleLifetime\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address LBPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint256 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint16 sampleLifetime\\n    ) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function setFactoryLockedState(bool locked) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBLegacyPair LBPair) external;\\n}\\n\",\"keccak256\":\"0x0fda19ed4c71561d94dda1450f14fff189266091b3626973919e429c6adb8447\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBLegacyPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyToken} from \\\"./ILBLegacyToken.sol\\\";\\n\\n/// @title Liquidity Book Pair V2 Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBPair contract\\ninterface ILBLegacyPair is ILBLegacyToken {\\n    /// @dev Structure to store the protocol fees:\\n    /// - binStep: The bin step\\n    /// - baseFactor: The base factor\\n    /// - filterPeriod: The filter period, where the fees stays constant\\n    /// - decayPeriod: The decay period, where the fees are halved\\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\\n    /// - protocolShare: The share of fees sent to protocol\\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\\n    /// - volatilityAccumulated: The value of volatility accumulated\\n    /// - volatilityReference: The value of volatility reference\\n    /// - indexRef: The index reference\\n    /// - time: The last time the accumulator was called\\n    struct FeeParameters {\\n        // 144 lowest bits in slot\\n        uint16 binStep;\\n        uint16 baseFactor;\\n        uint16 filterPeriod;\\n        uint16 decayPeriod;\\n        uint16 reductionFactor;\\n        uint24 variableFeeControl;\\n        uint16 protocolShare;\\n        uint24 maxVolatilityAccumulated;\\n        // 112 highest bits in slot\\n        uint24 volatilityAccumulated;\\n        uint24 volatilityReference;\\n        uint24 indexRef;\\n        uint40 time;\\n    }\\n\\n    /// @dev Structure used during swaps to distributes the fees:\\n    /// - total: The total amount of fees\\n    /// - protocol: The amount of fees reserved for protocol\\n    struct FeesDistribution {\\n        uint128 total;\\n        uint128 protocol;\\n    }\\n\\n    /// @dev Structure to store the reserves of bins:\\n    /// - reserveX: The current reserve of tokenX of the bin\\n    /// - reserveY: The current reserve of tokenY of the bin\\n    struct Bin {\\n        uint112 reserveX;\\n        uint112 reserveY;\\n        uint256 accTokenXPerShare;\\n        uint256 accTokenYPerShare;\\n    }\\n\\n    /// @dev Structure to store the information of the pair such as:\\n    /// slot0:\\n    /// - activeId: The current id used for swaps, this is also linked with the price\\n    /// - reserveX: The sum of amounts of tokenX across all bins\\n    /// slot1:\\n    /// - reserveY: The sum of amounts of tokenY across all bins\\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\\n    /// - oracleSize: The current size of the oracle, can be increase by users\\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\\n    /// - oracleId: The current id of the oracle\\n    /// slot2:\\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\\n    /// slot3:\\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\\n    struct PairInformation {\\n        uint24 activeId;\\n        uint136 reserveX;\\n        uint136 reserveY;\\n        uint16 oracleSampleLifetime;\\n        uint16 oracleSize;\\n        uint16 oracleActiveSize;\\n        uint40 oracleLastTimestamp;\\n        uint16 oracleId;\\n        FeesDistribution feesX;\\n        FeesDistribution feesY;\\n    }\\n\\n    /// @dev Structure to store the debts of users\\n    /// - debtX: The tokenX's debt\\n    /// - debtY: The tokenY's debt\\n    struct Debts {\\n        uint256 debtX;\\n        uint256 debtY;\\n    }\\n\\n    /// @dev Structure to store fees:\\n    /// - tokenX: The amount of fees of token X\\n    /// - tokenY: The amount of fees of token Y\\n    struct Fees {\\n        uint128 tokenX;\\n        uint128 tokenY;\\n    }\\n\\n    /// @dev Structure to minting informations:\\n    /// - amountXIn: The amount of token X sent\\n    /// - amountYIn: The amount of token Y sent\\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\\n    /// - activeFeeX: Fees X currently generated\\n    /// - activeFeeY: Fees Y currently generated\\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\\n    /// - id: Id of the current working bin when looping on the distribution array\\n    /// - amountX: The amount of token X deposited in the current bin\\n    /// - amountY: The amount of token Y deposited in the current bin\\n    /// - distributionX: Distribution of token X for the current working bin\\n    /// - distributionY: Distribution of token Y for the current working bin\\n    struct MintInfo {\\n        uint256 amountXIn;\\n        uint256 amountYIn;\\n        uint256 amountXAddedToPair;\\n        uint256 amountYAddedToPair;\\n        uint256 activeFeeX;\\n        uint256 activeFeeY;\\n        uint256 totalDistributionX;\\n        uint256 totalDistributionY;\\n        uint256 id;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 distributionX;\\n        uint256 distributionY;\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        bool swapForY,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 volatilityAccumulated,\\n        uint256 fees\\n    );\\n\\n    event FlashLoan(address indexed sender, address indexed receiver, IERC20 token, uint256 amount, uint256 fee);\\n\\n    event CompositionFee(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 feesX, uint256 feesY\\n    );\\n\\n    event DepositedToBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event WithdrawnFromBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function factory() external view returns (address);\\n\\n    function getReservesAndId() external view returns (uint256 reserveX, uint256 reserveY, uint256 activeId);\\n\\n    function getGlobalFees()\\n        external\\n        view\\n        returns (uint128 feesXTotal, uint128 feesYTotal, uint128 feesXProtocol, uint128 feesYProtocol);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (\\n            uint256 oracleSampleLifetime,\\n            uint256 oracleSize,\\n            uint256 oracleActiveSize,\\n            uint256 oracleLastTimestamp,\\n            uint256 oracleId,\\n            uint256 min,\\n            uint256 max\\n        );\\n\\n    function getOracleSampleFrom(uint256 timeDelta)\\n        external\\n        view\\n        returns (uint256 cumulativeId, uint256 cumulativeAccumulator, uint256 cumulativeBinCrossed);\\n\\n    function feeParameters() external view returns (FeeParameters memory);\\n\\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\\n\\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\\n\\n    function pendingFees(address account, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n\\n    function flashLoan(address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n\\n    function mint(\\n        uint256[] calldata ids,\\n        uint256[] calldata distributionX,\\n        uint256[] calldata distributionY,\\n        address to\\n    ) external returns (uint256 amountXAddedToPair, uint256 amountYAddedToPair, uint256[] memory liquidityMinted);\\n\\n    function burn(uint256[] calldata ids, uint256[] calldata amounts, address to)\\n        external\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function increaseOracleLength(uint16 newSize) external;\\n\\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\\n\\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\\n\\n    function setFeesParameters(bytes32 packedFeeParameters) external;\\n\\n    function forceDecay() external;\\n\\n    function initialize(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint24 activeId,\\n        uint16 sampleLifetime,\\n        bytes32 packedFeeParameters\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6ed88e05f0be9d8b4f0af12c6b1b970456256a323fd90faccedda600a12a3ec5\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBLegacyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/// @title Liquidity Book Router Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBRouter contract\\ninterface ILBLegacyRouter {\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        uint256 deadline;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function wavax() external view returns (address);\\n\\n    function oldFactory() external view returns (address);\\n\\n    function getIdFromPrice(ILBLegacyPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBLegacyPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBLegacyPair lbPair, uint256 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountIn, uint256 feesIn);\\n\\n    function getSwapOut(ILBLegacyPair lbPair, uint256 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountOut, uint256 feesIn);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function addLiquidityAVAX(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityAVAX(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0x75e754631cc75e21dadc8efe871de9f7070bf0de7bf5b4580cddcb7f5369fcc8\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBLegacyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../../@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Liquidity Book V2 Token Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBToken contract\\ninterface ILBLegacyToken is IERC165 {\\n    event TransferSingle(address indexed sender, address indexed from, address indexed to, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory batchBalances);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function setApprovalForAll(address sender, bool approved) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount) external;\\n\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata id, uint256[] calldata amount)\\n        external;\\n}\\n\",\"keccak256\":\"0x1eff7d6f2c8ecc1fdf4afeb5495189c7510bae63b3b61245b28e09798ea6816f\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBFlashLoanCallback} from \\\"./ILBFlashLoanCallback.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\n\\ninterface ILBPair is ILBToken {\\n    error LBPair__ZeroBorrowAmount();\\n    error LBPair__AddressZero();\\n    error LBPair__AlreadyInitialized();\\n    error LBPair__EmptyMarketConfigs();\\n    error LBPair__FlashLoanCallbackFailed();\\n    error LBPair__FlashLoanInsufficientAmount();\\n    error LBPair__InsufficientAmountIn();\\n    error LBPair__InsufficientAmountOut();\\n    error LBPair__InvalidInput();\\n    error LBPair__InvalidStaticFeeParameters();\\n    error LBPair__OnlyFactory();\\n    error LBPair__OnlyProtocolFeeRecipient();\\n    error LBPair__OutOfLiquidity();\\n    error LBPair__TokenNotSupported();\\n    error LBPair__ZeroAmount(uint24 id);\\n    error LBPair__ZeroAmountsOut(uint24 id);\\n    error LBPair__ZeroShares(uint24 id);\\n    error LBPair__MaxTotalFeeExceeded();\\n\\n    struct MintArrays {\\n        uint256[] ids;\\n        bytes32[] amounts;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\\n\\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint24 id,\\n        bytes32 amountsIn,\\n        bytes32 amountsOut,\\n        uint24 volatilityAccumulator,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event StaticFeeParametersSet(\\n        address indexed sender,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        uint24 activeId,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\\n\\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\\n\\n    function initialize(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint24 activeId\\n    ) external;\\n\\n    function getFactory() external view returns (ILBFactory factory);\\n\\n    function getTokenX() external view returns (IERC20 tokenX);\\n\\n    function getTokenY() external view returns (IERC20 tokenY);\\n\\n    function getBinStep() external view returns (uint16 binStep);\\n\\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\\n\\n    function getActiveId() external view returns (uint24 activeId);\\n\\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\\n\\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\\n\\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\\n\\n    function getStaticFeeParameters()\\n        external\\n        view\\n        returns (\\n            uint16 baseFactor,\\n            uint16 filterPeriod,\\n            uint16 decayPeriod,\\n            uint16 reductionFactor,\\n            uint24 variableFeeControl,\\n            uint16 protocolShare,\\n            uint24 maxVolatilityAccumulator\\n        );\\n\\n    function getVariableFeeParameters()\\n        external\\n        view\\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\\n\\n    function getOracleSampleAt(uint40 lookupTimestamp)\\n        external\\n        view\\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\\n\\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\\n\\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\\n\\n    function getSwapIn(uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\\n\\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\\n\\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\\n        external\\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\\n\\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\\n        external\\n        returns (bytes32[] memory amounts);\\n\\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\\n\\n    function increaseOracleLength(uint16 newLength) external;\\n\\n    function setStaticFeeParameters(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function forceDecay() external;\\n}\\n\",\"keccak256\":\"0x5df401a7cdcb89d4c9bb1d4c52739fd16d878428ddace9b821311eee9ce1eb4b\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBLegacyFactory} from \\\"./ILBLegacyFactory.sol\\\";\\nimport {ILBLegacyRouter} from \\\"./ILBLegacyRouter.sol\\\";\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/**\\n * @title Liquidity Book Router Interface\\n * @author Trader Joe\\n * @notice Required interface of LBRouter contract\\n */\\ninterface ILBRouter {\\n    error LBRouter__SenderIsNotWNATIVE();\\n    error LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\\n    error LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\\n    error LBRouter__SwapOverflows(uint256 id);\\n    error LBRouter__BrokenSwapSafetyCheck();\\n    error LBRouter__NotFactoryOwner();\\n    error LBRouter__TooMuchTokensIn(uint256 excess);\\n    error LBRouter__BinReserveOverflows(uint256 id);\\n    error LBRouter__IdOverflows(int256 id);\\n    error LBRouter__LengthsMismatch();\\n    error LBRouter__WrongTokenOrder();\\n    error LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\\n    error LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\\n    error LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\\n    error LBRouter__FailedToSendNATIVE(address recipient, uint256 amount);\\n    error LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\\n    error LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\\n    error LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\\n    error LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\\n    error LBRouter__InvalidTokenPath(address wrongToken);\\n    error LBRouter__InvalidVersion(uint256 version);\\n    error LBRouter__WrongNativeLiquidityParameters(\\n        address tokenX, address tokenY, uint256 amountX, uint256 amountY, uint256 msgValue\\n    );\\n\\n    /**\\n     * @dev This enum represents the version of the pair requested\\n     * - V1: Joe V1 pair\\n     * - V2: LB pair V2. Also called legacyPair\\n     * - V2_1: LB pair V2.1 (current version)\\n     */\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1\\n    }\\n\\n    /**\\n     * @dev The liquidity parameters, such as:\\n     * - tokenX: The address of token X\\n     * - tokenY: The address of token Y\\n     * - binStep: The bin step of the pair\\n     * - amountX: The amount to send of token X\\n     * - amountY: The amount to send of token Y\\n     * - amountXMin: The min amount of token X added to liquidity\\n     * - amountYMin: The min amount of token Y added to liquidity\\n     * - activeIdDesired: The active id that user wants to add liquidity from\\n     * - idSlippage: The number of id that are allowed to slip\\n     * - deltaIds: The list of delta ids to add liquidity (`deltaId = activeId - desiredId`)\\n     * - distributionX: The distribution of tokenX with sum(distributionX) = 100e18 (100%) or 0 (0%)\\n     * - distributionY: The distribution of tokenY with sum(distributionY) = 100e18 (100%) or 0 (0%)\\n     * - to: The address of the recipient\\n     * - refundTo: The address of the recipient of the refunded tokens if too much tokens are sent\\n     * - deadline: The deadline of the transaction\\n     */\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        address refundTo;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev The path parameters, such as:\\n     * - pairBinSteps: The list of bin steps of the pairs to go through\\n     * - versions: The list of versions of the pairs to go through\\n     * - tokenPath: The list of tokens in the path to go through\\n     */\\n    struct Path {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function getFactory() external view returns (ILBFactory);\\n\\n    function getLegacyFactory() external view returns (ILBLegacyFactory);\\n\\n    function getV1Factory() external view returns (IJoeFactory);\\n\\n    function getLegacyRouter() external view returns (ILBLegacyRouter);\\n\\n    function getWNATIVE() external view returns (IWNATIVE);\\n\\n    function getIdFromPrice(ILBPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBPair LBPair, uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(ILBPair LBPair, uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function addLiquidityNATIVE(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityNATIVE(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountNATIVEMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountNATIVE);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVE(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokens(uint256 amountOutMin, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactNATIVE(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapNATIVEForExactTokens(uint256 amountOut, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVESupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0xeebc63883dc5587e914f7cd257ec9bc28a949a4fa55c402513cd2e0a9738731d\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Token Interface\\n * @author Trader Joe\\n * @notice Interface to interact with the LBToken.\\n */\\ninterface ILBToken {\\n    error LBToken__AddressThisOrZero();\\n    error LBToken__InvalidLength();\\n    error LBToken__SelfApproval(address owner);\\n    error LBToken__SpenderNotApproved(address from, address spender);\\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function approveForAll(address spender, bool approved) external;\\n\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0xde38a9a58e3e95314106f73e8aeaa45d8f89237644531e9f97129542ffd19c81\",\"license\":\"MIT\"},\"contracts/moat/interfaces/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Pending Ownable Interface\\n * @author Trader Joe\\n * @notice Required interface of Pending Ownable contract used for LBFactory\\n */\\ninterface IPendingOwnable {\\n    error PendingOwnable__AddressZero();\\n    error PendingOwnable__NoPendingOwner();\\n    error PendingOwnable__NotOwner();\\n    error PendingOwnable__NotPendingOwner();\\n    error PendingOwnable__PendingOwnerAlreadySet();\\n\\n    event PendingOwnerSet(address indexed pendingOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0xca596ca84a58cf4e9665afd027304c78efdd5c5a5265c9c61530bf2c1da28a08\",\"license\":\"MIT\"},\"contracts/moat/interfaces/IWNATIVE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title WNATIVE Interface\\n * @notice Required interface of Wrapped NATIVE contract\\n */\\ninterface IWNATIVE is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x5548eea96e26984170eb3bb9f7b7f4f28670f3017d5fff2459348425b4bf040a\",\"license\":\"MIT\"},\"contracts/moat/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Constants Library\\n * @author Trader Joe\\n * @notice Set of constants for Liquidity Book contracts\\n */\\nlibrary Constants {\\n    uint8 internal constant SCALE_OFFSET = 128;\\n    uint256 internal constant SCALE = 1 << SCALE_OFFSET;\\n\\n    uint256 internal constant PRECISION = 1e18;\\n    uint256 internal constant SQUARED_PRECISION = PRECISION * PRECISION;\\n\\n    uint256 internal constant MAX_FEE = 0.1e18; // 10%\\n    uint256 internal constant MAX_PROTOCOL_SHARE = 2_500; // 25% of the fee\\n\\n    uint256 internal constant BASIS_POINT_MAX = 10_000;\\n\\n    /// @dev The expected return after a successful flash loan\\n    bytes32 internal constant CALLBACK_SUCCESS = keccak256(\\\"LBPair.onFlashLoan\\\");\\n}\\n\",\"keccak256\":\"0x51398412331e90c15b06e4637478353d4a6f64d5171fb85628a26927e633d4a7\",\"license\":\"MIT\"},\"contracts/moat/libraries/PriceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Uint128x128Math} from \\\"./math/Uint128x128Math.sol\\\";\\nimport {Uint256x256Math} from \\\"./math/Uint256x256Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Liquidity Book Price Helper Library\\n * @author Trader Joe\\n * @notice This library contains functions to calculate prices\\n */\\nlibrary PriceHelper {\\n    using Uint128x128Math for uint256;\\n    using Uint256x256Math for uint256;\\n    using SafeCast for uint256;\\n\\n    int256 private constant REAL_ID_SHIFT = 1 << 23;\\n\\n    /**\\n     * @dev Calculates the price from the id and the bin step\\n     * @param id The id\\n     * @param binStep The bin step\\n     * @return price The price as a 128.128-binary fixed-point number\\n     */\\n    function getPriceFromId(uint24 id, uint16 binStep) internal pure returns (uint256 price) {\\n        uint256 base = getBase(binStep);\\n        int256 exponent = getExponent(id);\\n\\n        price = base.pow(exponent);\\n    }\\n\\n    /**\\n     * @dev Calculates the id from the price and the bin step\\n     * @param price The price as a 128.128-binary fixed-point number\\n     * @param binStep The bin step\\n     * @return id The id\\n     */\\n    function getIdFromPrice(uint256 price, uint16 binStep) internal pure returns (uint24 id) {\\n        uint256 base = getBase(binStep);\\n        int256 realId = price.log2() / base.log2();\\n\\n        unchecked {\\n            id = uint256(REAL_ID_SHIFT + realId).safe24();\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the base from the bin step, which is `1 + binStep / BASIS_POINT_MAX`\\n     * @param binStep The bin step\\n     * @return base The base\\n     */\\n    function getBase(uint16 binStep) internal pure returns (uint256) {\\n        unchecked {\\n            return Constants.SCALE + (uint256(binStep) << Constants.SCALE_OFFSET) / Constants.BASIS_POINT_MAX;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exponent from the id, which is `id - REAL_ID_SHIFT`\\n     * @param id The id\\n     * @return exponent The exponent\\n     */\\n    function getExponent(uint24 id) internal pure returns (int256) {\\n        unchecked {\\n            return int256(uint256(id)) - REAL_ID_SHIFT;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a price with 18 decimals to a 128.128-binary fixed-point number\\n     * @param price The price with 18 decimals\\n     * @return price128x128 The 128.128-binary fixed-point number\\n     */\\n    function convertDecimalPriceTo128x128(uint256 price) internal pure returns (uint256) {\\n        return price.shiftDivRoundDown(Constants.SCALE_OFFSET, Constants.PRECISION);\\n    }\\n\\n    /**\\n     * @dev Converts a 128.128-binary fixed-point number to a price with 18 decimals\\n     * @param price128x128 The 128.128-binary fixed-point number\\n     * @return price The price with 18 decimals\\n     */\\n    function convert128x128PriceToDecimal(uint256 price128x128) internal pure returns (uint256) {\\n        return price128x128.mulShiftRoundDown(Constants.PRECISION, Constants.SCALE_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb8e1b24c8129634b981f6c1c8822962a6bbf023e312bebcad7d0e9d468848615\",\"license\":\"MIT\"},\"contracts/moat/libraries/math/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Bit Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for bit calculations\\n */\\nlibrary BitMath {\\n    /**\\n     * @dev Returns the index of the closest bit on the right of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the right of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitRight(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            uint256 shift = 255 - bit;\\n            x <<= shift;\\n\\n            // can't overflow as it's non-zero and we shifted it by `_shift`\\n            return (x == 0) ? type(uint256).max : mostSignificantBit(x) - shift;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the closest bit on the left of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the left of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitLeft(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            x >>= bit;\\n\\n            return (x == 0) ? type(uint256).max : leastSignificantBit(x) + bit;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the most significant bit of x\\n     * This function returns 0 if x is 0\\n     * @param x The value as a uint256\\n     * @return msb The index of the most significant bit of x\\n     */\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 msb) {\\n        assembly {\\n            if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                x := shr(128, x)\\n                msb := 128\\n            }\\n            if gt(x, 0xffffffffffffffff) {\\n                x := shr(64, x)\\n                msb := add(msb, 64)\\n            }\\n            if gt(x, 0xffffffff) {\\n                x := shr(32, x)\\n                msb := add(msb, 32)\\n            }\\n            if gt(x, 0xffff) {\\n                x := shr(16, x)\\n                msb := add(msb, 16)\\n            }\\n            if gt(x, 0xff) {\\n                x := shr(8, x)\\n                msb := add(msb, 8)\\n            }\\n            if gt(x, 0xf) {\\n                x := shr(4, x)\\n                msb := add(msb, 4)\\n            }\\n            if gt(x, 0x3) {\\n                x := shr(2, x)\\n                msb := add(msb, 2)\\n            }\\n            if gt(x, 0x1) { msb := add(msb, 1) }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the least significant bit of x\\n     * This function returns 255 if x is 0\\n     * @param x The value as a uint256\\n     * @return lsb The index of the least significant bit of x\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 lsb) {\\n        assembly {\\n            let sx := shl(128, x)\\n            if iszero(iszero(sx)) {\\n                lsb := 128\\n                x := sx\\n            }\\n            sx := shl(64, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 64)\\n            }\\n            sx := shl(32, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 32)\\n            }\\n            sx := shl(16, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 16)\\n            }\\n            sx := shl(8, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 8)\\n            }\\n            sx := shl(4, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 4)\\n            }\\n            sx := shl(2, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 2)\\n            }\\n            if iszero(iszero(shl(1, x))) { lsb := add(lsb, 1) }\\n\\n            lsb := sub(255, lsb)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa6411022d4cbcc0be4975f5ad9b6ccd7eeeb09eeae6b245c1c6dfd2b0f9f70a\",\"license\":\"MIT\"},\"contracts/moat/libraries/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Safe Cast Library\\n * @author Trader Joe\\n * @notice This library contains functions to safely cast uint256 to different uint types.\\n */\\nlibrary SafeCast {\\n    error SafeCast__Exceeds248Bits();\\n    error SafeCast__Exceeds240Bits();\\n    error SafeCast__Exceeds232Bits();\\n    error SafeCast__Exceeds224Bits();\\n    error SafeCast__Exceeds216Bits();\\n    error SafeCast__Exceeds208Bits();\\n    error SafeCast__Exceeds200Bits();\\n    error SafeCast__Exceeds192Bits();\\n    error SafeCast__Exceeds184Bits();\\n    error SafeCast__Exceeds176Bits();\\n    error SafeCast__Exceeds168Bits();\\n    error SafeCast__Exceeds160Bits();\\n    error SafeCast__Exceeds152Bits();\\n    error SafeCast__Exceeds144Bits();\\n    error SafeCast__Exceeds136Bits();\\n    error SafeCast__Exceeds128Bits();\\n    error SafeCast__Exceeds120Bits();\\n    error SafeCast__Exceeds112Bits();\\n    error SafeCast__Exceeds104Bits();\\n    error SafeCast__Exceeds96Bits();\\n    error SafeCast__Exceeds88Bits();\\n    error SafeCast__Exceeds80Bits();\\n    error SafeCast__Exceeds72Bits();\\n    error SafeCast__Exceeds64Bits();\\n    error SafeCast__Exceeds56Bits();\\n    error SafeCast__Exceeds48Bits();\\n    error SafeCast__Exceeds40Bits();\\n    error SafeCast__Exceeds32Bits();\\n    error SafeCast__Exceeds24Bits();\\n    error SafeCast__Exceeds16Bits();\\n    error SafeCast__Exceeds8Bits();\\n\\n    /**\\n     * @dev Returns x on uint248 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint248\\n     */\\n    function safe248(uint256 x) internal pure returns (uint248 y) {\\n        if ((y = uint248(x)) != x) revert SafeCast__Exceeds248Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint240 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint240\\n     */\\n    function safe240(uint256 x) internal pure returns (uint240 y) {\\n        if ((y = uint240(x)) != x) revert SafeCast__Exceeds240Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint232 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint232\\n     */\\n    function safe232(uint256 x) internal pure returns (uint232 y) {\\n        if ((y = uint232(x)) != x) revert SafeCast__Exceeds232Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint224 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint224\\n     */\\n    function safe224(uint256 x) internal pure returns (uint224 y) {\\n        if ((y = uint224(x)) != x) revert SafeCast__Exceeds224Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint216 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint216\\n     */\\n    function safe216(uint256 x) internal pure returns (uint216 y) {\\n        if ((y = uint216(x)) != x) revert SafeCast__Exceeds216Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint208 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint208\\n     */\\n    function safe208(uint256 x) internal pure returns (uint208 y) {\\n        if ((y = uint208(x)) != x) revert SafeCast__Exceeds208Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint200 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint200\\n     */\\n    function safe200(uint256 x) internal pure returns (uint200 y) {\\n        if ((y = uint200(x)) != x) revert SafeCast__Exceeds200Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint192 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint192\\n     */\\n    function safe192(uint256 x) internal pure returns (uint192 y) {\\n        if ((y = uint192(x)) != x) revert SafeCast__Exceeds192Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint184 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint184\\n     */\\n    function safe184(uint256 x) internal pure returns (uint184 y) {\\n        if ((y = uint184(x)) != x) revert SafeCast__Exceeds184Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint176 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint176\\n     */\\n    function safe176(uint256 x) internal pure returns (uint176 y) {\\n        if ((y = uint176(x)) != x) revert SafeCast__Exceeds176Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint168 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint168\\n     */\\n    function safe168(uint256 x) internal pure returns (uint168 y) {\\n        if ((y = uint168(x)) != x) revert SafeCast__Exceeds168Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint160 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint160\\n     */\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        if ((y = uint160(x)) != x) revert SafeCast__Exceeds160Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint152 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint152\\n     */\\n    function safe152(uint256 x) internal pure returns (uint152 y) {\\n        if ((y = uint152(x)) != x) revert SafeCast__Exceeds152Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint144 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint144\\n     */\\n    function safe144(uint256 x) internal pure returns (uint144 y) {\\n        if ((y = uint144(x)) != x) revert SafeCast__Exceeds144Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint136 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint136\\n     */\\n    function safe136(uint256 x) internal pure returns (uint136 y) {\\n        if ((y = uint136(x)) != x) revert SafeCast__Exceeds136Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint128 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint128\\n     */\\n    function safe128(uint256 x) internal pure returns (uint128 y) {\\n        if ((y = uint128(x)) != x) revert SafeCast__Exceeds128Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint120 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint120\\n     */\\n    function safe120(uint256 x) internal pure returns (uint120 y) {\\n        if ((y = uint120(x)) != x) revert SafeCast__Exceeds120Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint112 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint112\\n     */\\n    function safe112(uint256 x) internal pure returns (uint112 y) {\\n        if ((y = uint112(x)) != x) revert SafeCast__Exceeds112Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint104 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint104\\n     */\\n    function safe104(uint256 x) internal pure returns (uint104 y) {\\n        if ((y = uint104(x)) != x) revert SafeCast__Exceeds104Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint96 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint96\\n     */\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        if ((y = uint96(x)) != x) revert SafeCast__Exceeds96Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint88 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint88\\n     */\\n    function safe88(uint256 x) internal pure returns (uint88 y) {\\n        if ((y = uint88(x)) != x) revert SafeCast__Exceeds88Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint80 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint80\\n     */\\n    function safe80(uint256 x) internal pure returns (uint80 y) {\\n        if ((y = uint80(x)) != x) revert SafeCast__Exceeds80Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint72 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint72\\n     */\\n    function safe72(uint256 x) internal pure returns (uint72 y) {\\n        if ((y = uint72(x)) != x) revert SafeCast__Exceeds72Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint64 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint64\\n     */\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        if ((y = uint64(x)) != x) revert SafeCast__Exceeds64Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint56 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint56\\n     */\\n    function safe56(uint256 x) internal pure returns (uint56 y) {\\n        if ((y = uint56(x)) != x) revert SafeCast__Exceeds56Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint48 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint48\\n     */\\n    function safe48(uint256 x) internal pure returns (uint48 y) {\\n        if ((y = uint48(x)) != x) revert SafeCast__Exceeds48Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint40 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint40\\n     */\\n    function safe40(uint256 x) internal pure returns (uint40 y) {\\n        if ((y = uint40(x)) != x) revert SafeCast__Exceeds40Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint32 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint32\\n     */\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        if ((y = uint32(x)) != x) revert SafeCast__Exceeds32Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint24 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint24\\n     */\\n    function safe24(uint256 x) internal pure returns (uint24 y) {\\n        if ((y = uint24(x)) != x) revert SafeCast__Exceeds24Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint16 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint16\\n     */\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        if ((y = uint16(x)) != x) revert SafeCast__Exceeds16Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint8 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint8\\n     */\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        if ((y = uint8(x)) != x) revert SafeCast__Exceeds8Bits();\\n    }\\n}\\n\",\"keccak256\":\"0x3606216af31e4d9e47841c3d8db84674ffd59adf2b60c65bf6242a499f0baf2a\",\"license\":\"MIT\"},\"contracts/moat/libraries/math/Uint128x128Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\n\\n/**\\n * @title Liquidity Book Uint128x128 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for power and log calculations\\n */\\nlibrary Uint128x128Math {\\n    using BitMath for uint256;\\n\\n    error Uint128x128Math__LogUnderflow();\\n    error Uint128x128Math__PowUnderflow(uint256 x, int256 y);\\n\\n    uint256 constant LOG_SCALE_OFFSET = 127;\\n    uint256 constant LOG_SCALE = 1 << LOG_SCALE_OFFSET;\\n    uint256 constant LOG_SCALE_SQUARED = LOG_SCALE * LOG_SCALE;\\n\\n    /**\\n     * @notice Calculates the binary logarithm of x.\\n     * @dev Based on the iterative approximation algorithm.\\n     * https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n     * Requirements:\\n     * - x must be greater than zero.\\n     * Caveats:\\n     * - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation\\n     * Also because x is converted to an unsigned 129.127-binary fixed-point number during the operation to optimize the multiplication\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the binary logarithm.\\n     * @return result The binary logarithm as a signed 128.128-binary fixed-point number.\\n     */\\n    function log2(uint256 x) internal pure returns (int256 result) {\\n        // Convert x to a unsigned 129.127-binary fixed-point number to optimize the multiplication.\\n        // If we use an offset of 128 bits, y would need 129 bits and y**2 would would overflow and we would have to\\n        // use mulDiv, by reducing x to 129.127-binary fixed-point number we assert that y will use 128 bits, and we\\n        // can use the regular multiplication\\n\\n        if (x == 1) return -128;\\n        if (x == 0) revert Uint128x128Math__LogUnderflow();\\n\\n        x >>= 1;\\n\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= LOG_SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas\\n                x = LOG_SCALE_SQUARED / x;\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = (x >> LOG_SCALE_OFFSET).mostSignificantBit();\\n\\n            // The integer part of the logarithm as a signed 129.127-binary fixed-point number. The operation can't overflow\\n            // because n is maximum 255, LOG_SCALE_OFFSET is 127 bits and sign is either 1 or -1.\\n            result = int256(n) << LOG_SCALE_OFFSET;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y != LOG_SCALE) {\\n                // Calculate the fractional part via the iterative approximation.\\n                // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n                for (int256 delta = int256(1 << (LOG_SCALE_OFFSET - 1)); delta > 0; delta >>= 1) {\\n                    y = (y * y) >> LOG_SCALE_OFFSET;\\n\\n                    // Is y^2 > 2 and so in the range [2,4)?\\n                    if (y >= 1 << (LOG_SCALE_OFFSET + 1)) {\\n                        // Add the 2^(-m) factor to the logarithm.\\n                        result += delta;\\n\\n                        // Corresponds to z/2 on Wikipedia.\\n                        y >>= 1;\\n                    }\\n                }\\n            }\\n            // Convert x back to unsigned 128.128-binary fixed-point number\\n            result = (result * sign) << 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the value of x^y. It calculates `1 / x^abs(y)` if x is bigger than 2^128.\\n     * At the end of the operations, we invert the result if needed.\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the power\\n     * @param y A relative number without any decimals, needs to be between ]2^21; 2^21[\\n     */\\n    function pow(uint256 x, int256 y) internal pure returns (uint256 result) {\\n        bool invert;\\n        uint256 absY;\\n\\n        if (y == 0) return Constants.SCALE;\\n\\n        assembly {\\n            absY := y\\n            if slt(absY, 0) {\\n                absY := sub(0, absY)\\n                invert := iszero(invert)\\n            }\\n        }\\n\\n        if (absY < 0x100000) {\\n            result = Constants.SCALE;\\n            assembly {\\n                let squared := x\\n                if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                    squared := div(not(0), squared)\\n                    invert := iszero(invert)\\n                }\\n\\n                if and(absY, 0x1) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x100) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x200) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x400) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x800) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x1000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80000) { result := shr(128, mul(result, squared)) }\\n            }\\n        }\\n\\n        // revert if y is too big or if x^y underflowed\\n        if (result == 0) revert Uint128x128Math__PowUnderflow(x, y);\\n\\n        return invert ? type(uint256).max / result : result;\\n    }\\n}\\n\",\"keccak256\":\"0x77ce0843579913f27080d993d8c2d3c21952bbc03c28cdfc3ca00a5878558bea\",\"license\":\"MIT\"},\"contracts/moat/libraries/math/Uint256x256Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Uint256x256 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for full precision calculations\\n */\\nlibrary Uint256x256Math {\\n    error Uint256x256Math__MulShiftOverflow();\\n    error Uint256x256Math__MulDivOverflow();\\n\\n    /**\\n     * @notice Calculates floor(x*y/denominator) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        return _getEndOfDivRoundDown(x, y, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x*y/denominator) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        result = mulDivRoundDown(x, y, denominator);\\n        if (mulmod(x, y, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundDown(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        if (prod0 != 0) result = prod0 >> offset;\\n        if (prod1 != 0) {\\n            // Make sure the result is less than 2^256.\\n            if (prod1 >= 1 << offset) {\\n                revert Uint256x256Math__MulShiftOverflow();\\n            }\\n\\n            unchecked {\\n                result += prod1 << (256 - offset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundUp(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        result = mulShiftRoundDown(x, y, offset);\\n        if (mulmod(x, y, 1 << offset) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x << offset / y) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundDown(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n\\n        prod0 = x << offset; // Least significant 256 bits of the product\\n        unchecked {\\n            prod1 = x >> (256 - offset); // Most significant 256 bits of the product\\n        }\\n\\n        return _getEndOfDivRoundDown(x, 1 << offset, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x << offset / y) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundUp(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        result = shiftDivRoundDown(x, offset, denominator);\\n        if (mulmod(x, 1 << offset, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y` as 2 uint256\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @return prod0 The least significant 256 bits of the product\\n     * @return prod1 The most significant 256 bits of the product\\n     */\\n    function _getMulProds(uint256 x, uint256 y) private pure returns (uint256 prod0, uint256 prod1) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y / denominator` with full precision\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @param prod0 The least significant 256 bits of the product\\n     * @param prod1 The most significant 256 bits of the product\\n     * @return result The result as an uint256\\n     */\\n    function _getEndOfDivRoundDown(uint256 x, uint256 y, uint256 denominator, uint256 prod0, uint256 prod1)\\n        private\\n        pure\\n        returns (uint256 result)\\n    {\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n        } else {\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0\\n            if (prod1 >= denominator) revert Uint256x256Math__MulDivOverflow();\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1\\n            // See https://cs.stackexchange.com/q/138556/92363\\n            unchecked {\\n                // Does not overflow because the denominator cannot be zero at this stage in the function\\n                uint256 lpotdod = denominator & (~denominator + 1);\\n                assembly {\\n                    // Divide denominator by lpotdod.\\n                    denominator := div(denominator, lpotdod)\\n\\n                    // Divide [prod1 prod0] by lpotdod.\\n                    prod0 := div(prod0, lpotdod)\\n\\n                    // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one\\n                    lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n                }\\n\\n                // Shift in bits from prod1 into prod0\\n                prod0 |= prod1 * lpotdod;\\n\\n                // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n                // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n                // four bits. That is, denominator * inv = 1 mod 2^4\\n                uint256 inverse = (3 * denominator) ^ 2;\\n\\n                // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n                // in modular arithmetic, doubling the correct bits in each step\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n                // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n                // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n                // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n                // is no longer required.\\n                result = prod0 * inverse;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b2dfaa69d28844cefe6e1b151df9b794e3425b920c9b5f5064a40cbeca36e41\",\"license\":\"MIT\"},\"contracts/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        public\\n        virtual\\n    {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(\\\"1\\\"),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4070106775a06b95735c7f7903435cf94cd91c9660c18a39035296e9807f9096\",\"license\":\"AGPL-3.0-only\"},\"contracts/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success :=\\n                and(\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                    // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                    // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                    // Counterintuitively, this call must be positioned second to the or() call in the\\n                    // surrounding and() call or else returndatasize() will be zero during the computation.\\n                    call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n                )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(ERC20 token, address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success :=\\n                and(\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                    // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                    // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                    // Counterintuitively, this call must be positioned second to the or() call in the\\n                    // surrounding and() call or else returndatasize() will be zero during the computation.\\n                    call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n                )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(ERC20 token, address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success :=\\n                and(\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                    // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                    // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                    // Counterintuitively, this call must be positioned second to the or() call in the\\n                    // surrounding and() call or else returndatasize() will be zero during the computation.\\n                    call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n                )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1c5c5df70ed4d180b6b5fff27076dbdd13ded46887af15771bac3716f5231166\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "disableRebalances(bool,bool)": {
        "params": {
          "fees": "bool fees enabled?",
          "rebalances": "bool rebalances enabled?."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "burnFee": {
        "details": "updated fee breakdown"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approvals()": {
        "notice": "approvals for joe router."
      },
      "disableRebalances(bool,bool)": {
        "notice": "only admin function to disable rebalances and fees in case of bugs."
      },
      "getActiveBinId()": {
        "notice": "Get's the pool active bin id."
      },
      "getAverageTokenPrice(uint256,uint256)": {
        "notice": "Helper func."
      },
      "getFloorPrice()": {
        "notice": "returns the current floor price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6775,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6777,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6781,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6785,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6791,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6799,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 567,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "joeRouter",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ILBRouter)4866"
      },
      {
        "astId": 570,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "pair",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ILBPair)4324"
      },
      {
        "astId": 572,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "vault",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 576,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "founderWallet",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 578,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "devWallet",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 580,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "rebalancesEnabled",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 582,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "feesEnabled",
        "offset": 21,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 584,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "isRebalancing",
        "offset": 22,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 586,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "binStep",
        "offset": 23,
        "slot": "11",
        "type": "t_uint16"
      },
      {
        "astId": 588,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "startBin",
        "offset": 25,
        "slot": "11",
        "type": "t_uint24"
      },
      {
        "astId": 590,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "lastRecordedActiveBin",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 592,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "maxBin",
        "offset": 0,
        "slot": "13",
        "type": "t_uint24"
      },
      {
        "astId": 594,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "xPerBin",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 596,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "floorLiquidityBin",
        "offset": 0,
        "slot": "15",
        "type": "t_uint24"
      },
      {
        "astId": 598,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "tightLiqBin",
        "offset": 3,
        "slot": "15",
        "type": "t_uint24"
      },
      {
        "astId": 602,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "burnFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 605,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "stakeFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 607,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "seedLiquidityTimes",
        "offset": 0,
        "slot": "18",
        "type": "t_uint24"
      },
      {
        "astId": 609,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "maxSupply",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 613,
        "contract": "contracts/moat/MOAT.sol:MOAT",
        "label": "blacklist",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILBPair)4324": {
        "encoding": "inplace",
        "label": "contract ILBPair",
        "numberOfBytes": "20"
      },
      "t_contract(ILBRouter)4866": {
        "encoding": "inplace",
        "label": "contract ILBRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}