{
  "address": "0x6560c5AE3332bD6A036F48239a1D90BA3f51872a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILBRouter",
          "name": "joeRouter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "native_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_xPerBin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "devWallet_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "founderWallet_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Uint256x256Math__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "binStep",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pct",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "rebalances",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "fees",
          "type": "bool"
        }
      ],
      "name": "disableRebalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "floorLiquidityBin",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveBinId",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        }
      ],
      "name": "getAverageTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFloorPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair_",
          "type": "address"
        },
        {
          "internalType": "int256[]",
          "name": "deltaIds",
          "type": "int256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "distributionX",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "distributionY",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeRouter",
      "outputs": [
        {
          "internalType": "contract ILBRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRecordedActiveBin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBin",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract ILBPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "punishFloorSellers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancesEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seedLiquidityTimes",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        }
      ],
      "name": "setNewVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSlippageTolerance",
          "type": "uint256"
        }
      ],
      "name": "setSlippageToleranceMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageToleranceMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBin",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tightLiqBin",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xPerBin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2bc35d584c4d664e6f97c0d9f12c0130a780d2f48f2f4e6f5c87d986788ee33d",
  "receipt": {
    "to": null,
    "from": "0xfFA869c78F5510f78BE30E989175Dda960b18C6a",
    "contractAddress": "0x6560c5AE3332bD6A036F48239a1D90BA3f51872a",
    "transactionIndex": 1,
    "gasUsed": "40804452",
    "logsBloom": "0x
    "blockHash": "0x5eb06c51ed3636b28565c18040d293a197f72fdc4342bead0468166486e8edf3",
    "transactionHash": "0x2bc35d584c4d664e6f97c0d9f12c0130a780d2f48f2f4e6f5c87d986788ee33d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 90788257,
        "transactionHash": "0x2bc35d584c4d664e6f97c0d9f12c0130a780d2f48f2f4e6f5c87d986788ee33d",
        "address": "0x6560c5AE3332bD6A036F48239a1D90BA3f51872a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ffa869c78f5510f78be30e989175dda960b18c6a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5eb06c51ed3636b28565c18040d293a197f72fdc4342bead0468166486e8edf3"
      }
    ],
    "blockNumber": 90788257,
    "cumulativeGasUsed": "40804452",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    30000000,
    25000,
    "0xfaE14106232e610FA7607a27bDf6d3Fe1D32CdD5",
    "0x5140780e32d84a3ddF2feBE31fFA0741c1a515E1"
  ],
  "numDeployments": 2,
  "solcInputHash": "1ffe8ee147de04a9615007da1a940098",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILBRouter\",\"name\":\"joeRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"native_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xPerBin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"founderWallet_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Uint256x256Math__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"binStep\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"rebalances\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fees\",\"type\":\"bool\"}],\"name\":\"disableRebalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorLiquidityBin\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveBinId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"getAverageTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFloorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair_\",\"type\":\"address\"},{\"internalType\":\"int256[]\",\"name\":\"deltaIds\",\"type\":\"int256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionX\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionY\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeRouter\",\"outputs\":[{\"internalType\":\"contract ILBRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRecordedActiveBin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBin\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract ILBPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punishFloorSellers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedLiquidityTimes\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"setNewVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlippageTolerance\",\"type\":\"uint256\"}],\"name\":\"setSlippageToleranceMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageToleranceMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBin\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tightLiqBin\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xPerBin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"disableRebalances(bool,bool)\":{\"params\":{\"fees\":\"bool fees enabled?\",\"rebalances\":\"bool rebalances enabled?.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"stakeFee\":{\"details\":\"updated fee breakdown\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approvals()\":{\"notice\":\"approvals for joe router.\"},\"disableRebalances(bool,bool)\":{\"notice\":\"only admin function to disable rebalances and fees in case of bugs.\"},\"getActiveBinId()\":{\"notice\":\"Get's the pool active bin id.\"},\"getAverageTokenPrice(uint256,uint256)\":{\"notice\":\"Helper func.\"},\"getFloorPrice()\":{\"notice\":\"returns the current floor price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/moat/LADDER.sol\":\"LADDER\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa80cb30fccbba7c8ff72ac82cc898576a78d4c3031e85676840048f3fe195f5d\",\"license\":\"MIT\"},\"contracts/moat/LADDER.sol\":{\"content\":\"/*\\n ||||||||                   ||||||||\\n ||||||||                   ||||||||\\n ||||||||   \\u2584\\u2580\\u2580\\u2580\\u2580\\u2584          ||||||||\\n ||||||||   \\u2588    \\u2588          ||||||||\\n ||||||||   \\u2590    \\u2588          ||||||||\\n ||||||||        \\u2588          ||||||||\\n ||||||||       \\u2584\\u2580\\u2584\\u2584\\u2584\\u2584\\u2584\\u2584\\u2580   ||||||||\\n ||||||||       \\u2588           ||||||||  \\n ||||||||       \\u2590           ||||||||\\n ||||||||-------------------||||||||\\n ||||||||-------------------||||||||\\n ||||||||      \\u2584\\u2580\\u2580\\u2588\\u2584        ||||||||\\n ||||||||     \\u2590 \\u2584\\u2580 \\u2580\\u2584       ||||||||\\n ||||||||       \\u2588\\u2584\\u2584\\u2584\\u2588       |||||||| \\n ||||||||      \\u2584\\u2580   \\u2588       ||||||||\\n ||||||||      \\u2588   \\u2584\\u2580       |||||||| \\n ||||||||      \\u2590   \\u2590        ||||||||\\n ||||||||-------------------||||||||\\n ||||||||-------------------||||||||\\n ||||||||     \\u2584\\u2580\\u2580\\u2588\\u2584\\u2584        ||||||||\\n ||||||||     \\u2588 \\u2584\\u2580   \\u2588      |||||||| \\n ||||||||     \\u2590 \\u2588    \\u2588      ||||||||\\n ||||||||       \\u2588    \\u2588      ||||||||\\n ||||||||      \\u2584\\u2580\\u2584\\u2584\\u2584\\u2584\\u2580      ||||||||\\n ||||||||     \\u2588     \\u2590       ||||||||\\n ||||||||     \\u2590             ||||||||\\n ||||||||-------------------||||||||\\n ||||||||-------------------||||||||\\n ||||||||     \\u2584\\u2580\\u2580\\u2588\\u2584\\u2584        ||||||||\\n ||||||||     \\u2588 \\u2584\\u2580   \\u2588      |||||||| \\n ||||||||     \\u2590 \\u2588    \\u2588      ||||||||\\n ||||||||       \\u2588    \\u2588      ||||||||\\n ||||||||      \\u2584\\u2580\\u2584\\u2584\\u2584\\u2584\\u2580      ||||||||\\n ||||||||     \\u2588     \\u2590       ||||||||\\n ||||||||     \\u2590             ||||||||\\n ||||||||-------------------||||||||\\n ||||||||-------------------||||||||\\n ||||||||    \\u2584\\u2580\\u2580\\u2588\\u2584\\u2584\\u2584\\u2584       ||||||||\\n ||||||||    \\u2590  \\u2584\\u2580   \\u2590      ||||||||\\n ||||||||       \\u2588\\u2584\\u2584\\u2584\\u2584\\u2584      |||||||| \\n ||||||||       \\u2588    \\u258c      ||||||||\\n ||||||||      \\u2584\\u2580\\u2584\\u2584\\u2584\\u2584       ||||||||\\n ||||||||      \\u2588    \\u2590       ||||||||         \\n ||||||||-------------------||||||||\\n ||||||||-------------------||||||||\\n ||||||||     \\u2584\\u2580\\u2580\\u2584\\u2580\\u2580\\u2580\\u2584      ||||||||\\n ||||||||    \\u2588   \\u2588   \\u2588      ||||||||\\n ||||||||    \\u2590  \\u2588\\u2580\\u2580\\u2588\\u2580       ||||||||\\n ||||||||     \\u2584\\u2580    \\u2588       ||||||||\\n ||||||||    \\u2588     \\u2588        |||||||| \\n ||||||||    \\u2590     \\u2590        |||||||| \\n ||||||||                   ||||||||\\n ||||||||                   ||||||||\\n \\n \\n\\nLADDER is an experimental self-marketmaking token using liquidity bins on Trader Joe v2.1\\nForked from White Lotus Token\\n80% of rebalance goes to floor, 20% goes to wall \\nIf price moves from wall into floor, the function punishFloorSellers can be activated by anyone to burn the price wall resistance bin.\\nBecause of this new burn mechanic, the sell tax which previously was split between stakers and a burn now all goes to stakers.\\nThis token is an attempt at a store of value cryptocurrency, with a likely floor price. The floor price is not guaranteed. This token is not an investment vehicle, it is an experiment. \\n \\nLADDER is a fully decentralized protocol. There will be no continued development besides the contracts herein. Full ownership will be revoked and further development\\n(such as an interface for staking, rebalancing etc) will be the onus of the community\\n// SPDX-License-Identifier: MIT\\n */\\npragma solidity ^0.8.10;\\n\\nimport {SafeTransferLib} from \\\"../solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {ERC20} from \\\"../solmate/src/tokens/ERC20.sol\\\";\\n\\nimport \\\"../@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILBPair.sol\\\";\\nimport \\\"./interfaces/ILBRouter.sol\\\";\\nimport \\\"./interfaces/ILBToken.sol\\\";\\nimport \\\"../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./libraries/Constants.sol\\\";\\nimport {PriceHelper} from \\\"./libraries/PriceHelper.sol\\\";\\n\\ncontract LADDER is ERC20, Ownable {\\n    using SafeTransferLib for address payable;\\n    using SafeMath for uint256;\\n    using PriceHelper for uint256;\\n\\n    ILBRouter public joeRouter;\\n    ILBPair public pair;\\n    address public vault; //staking contract\\n    address public immutable NATIVE; //weth\\n    address private founderWallet;\\n    address private devWallet;\\n\\n    bool public rebalancesEnabled;\\n    bool public feesEnabled;\\n    bool isRebalancing;\\n\\n    // JOE LIQ\\n    uint16 public binStep; //bin steps\\n    uint24 public startBin; //starting bin\\n    uint256 public lastRecordedActiveBin; //recorded bin to know where rebalances occur.\\n    uint24 public maxBin; //this is the last bin where we have liq\\n    uint256 public xPerBin; //xToken amount per bin\\n    uint256 public slippageToleranceMultiplier = 99;\\n\\n    uint24 public floorLiquidityBin; //the floor where bin liquidity sits.\\n    uint24 public tightLiqBin; //bin for active trading\\n\\n    /// @dev updated fee breakdown\\n    uint256 public stakeFee = 100; //10%\\n\\n    uint24 public seedLiquidityTimes; //for initialize function\\n\\n    uint256 public maxSupply;\\n    bool public tradingEnabled;\\n\\n    // @dev blacklisting dexes to only provision liq to traderjoe\\n    // give me a mapping of address to bool\\n    mapping(address => bool) public blacklist;\\n\\n    constructor(\\n        ILBRouter joeRouter_,\\n        address native_,\\n        uint256 maxSupply_,\\n        uint256 _xPerBin,\\n        address devWallet_,\\n        address founderWallet_\\n    ) ERC20(\\\"LADDER\\\", \\\"LADDER\\\", 18) {\\n        address uniswapv3 = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n        address sushiswap = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\\n        address sushiswapTrident = 0xD9988b4B5bBC53A794240496cfA9Bf5b1F8E0523;\\n        address balancer = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n        address camelot = 0xc873fEcbd354f5A56E00E710B90EF4201db2448d;\\n        address chronos = 0xdd94018F54e565dbfc939F7C44a16e163FaAb331;\\n        address curve = 0x4c2Af2Df2a7E567B5155879720619EA06C5BB15D;\\n        address joev1 = 0xaE4EC9901c3076D0DdBe76A520F9E90a6227aCB7;\\n        address joev2 = 0x7BFd7192E76D950832c77BB412aaE841049D8D9B;\\n        blacklist[uniswapv3] = true;\\n        blacklist[sushiswap] = true;\\n        blacklist[sushiswapTrident] = true;\\n        blacklist[balancer] = true;\\n        blacklist[camelot] = true;\\n        blacklist[chronos] = true;\\n        blacklist[curve] = true;\\n        blacklist[joev1] = true;\\n        blacklist[joev2] = true;\\n\\n        joeRouter = joeRouter_;\\n        NATIVE = native_;\\n        devWallet = devWallet_;\\n        founderWallet = founderWallet_;\\n\\n        maxSupply = maxSupply_ * 1 ether;\\n        rebalancesEnabled = true;\\n        feesEnabled = true;\\n        xPerBin = _xPerBin * 1 ether;\\n    }\\n\\n    modifier rebalanceAllowed() {\\n        if (binStep == 0 || floorLiquidityBin == getActiveBinId()) {\\n            revert(\\\"At floor\\\");\\n        }\\n\\n        if (\\n            getActiveBinId() - lastRecordedActiveBin > 19 && rebalancesEnabled\\n        ) {\\n            _;\\n        } else {\\n            revert(\\\"Out of range\\\");\\n        }\\n    }\\n\\n    //====================================================================================================================\\n    // Initialize functions - messy cause developed via hackaton and would run out of gas otherwise. works on my machine.\\n    //====================================================================================================================\\n\\n    function initialize(\\n        address pair_,\\n        int256[] memory deltaIds,\\n        uint256[] memory distributionX,\\n        uint256[] memory distributionY,\\n        address _vault\\n    ) external payable onlyOwner {\\n        require(seedLiquidityTimes < 12, \\\"initialized\\\");\\n\\n        if (seedLiquidityTimes == 0) {\\n            vault = _vault;\\n            pair = ILBPair(pair_);\\n\\n            binStep = pair.getBinStep();\\n\\n            startBin = getActiveBinId();\\n            lastRecordedActiveBin = getActiveBinId() + 1; // add one because it's where our liquidity sits\\n\\n            approvals();\\n\\n            maxBin = getActiveBinId() + 1200;\\n        }\\n\\n        _mint(address(this), maxSupply / 12);\\n\\n        isRebalancing = true;\\n        addLiquidity(deltaIds, distributionX, distributionY, getActiveBinId());\\n        isRebalancing = false;\\n\\n        seedLiquidityTimes = seedLiquidityTimes + 1;\\n    }\\n\\n    //=============================================================================\\n    // Rebalance\\n    //=============================================================================\\n\\n    // Rebalance liquidity\\n    function rebalanceLiquidity() external rebalanceAllowed {\\n        isRebalancing = true;\\n\\n        removeLiquidity();\\n\\n        uint256 totalEthInContract = IERC20(NATIVE).balanceOf(address(this));\\n\\n        uint256 totalLotusInPool = (maxBin - (getActiveBinId() + 1)) * xPerBin;\\n\\n        uint256 totalCirculatingSupply = totalSupply -\\n            (totalLotusInPool +\\n                balanceOf[0x000000000000000000000000000000000000dEaD]);\\n\\n        uint256 newFloorPrice = getAverageTokenPrice(\\n            totalEthInContract,\\n            totalCirculatingSupply\\n        );\\n\\n        uint24 expectedFloorBin = joeRouter.getIdFromPrice(\\n            pair,\\n            newFloorPrice.convertDecimalPriceTo128x128()\\n        );\\n\\n        floorLiquidityBin = expectedFloorBin > getActiveBinId()\\n            ? getActiveBinId() - 1\\n            : expectedFloorBin;\\n\\n        int256 deltaForMainLiq = -(int24(getActiveBinId()) -\\n            int256(int24(floorLiquidityBin)));\\n\\n        tightLiqBin = getActiveBinId() - 1;\\n\\n        int256[] memory deltaIds = new int256[](2);\\n        deltaIds[0] = deltaForMainLiq;\\n        deltaIds[1] = -1;\\n\\n        uint256[] memory distributionX = new uint256[](2);\\n        distributionX[0] = 0;\\n        distributionX[1] = 0;\\n\\n        uint256[] memory distributionY = new uint256[](2);\\n\\n        // @dev changed %'s\\n        distributionY[0] = (Constants.PRECISION * 80) / 100;\\n        distributionY[1] = (Constants.PRECISION * 20) / 100;\\n\\n        addLiquidity(deltaIds, distributionX, distributionY, getActiveBinId());\\n\\n        isRebalancing = false;\\n    }\\n\\n    function punishFloorSellers() external {\\n        // Have to be at floor\\n        require(\\n            getActiveBinId() == floorLiquidityBin,\\n            \\\"active bin must be floor\\\"\\n        );\\n        uint256[] memory amounts = new uint256[](1);\\n        uint256[] memory ids = new uint256[](1);\\n        ids[0] = tightLiqBin;\\n        amounts[0] = pair.balanceOf(address(this), tightLiqBin) - 1;\\n        // remove liquidity from tightLiqBin\\n        pair.burn(address(this), address(this), ids, amounts);\\n\\n        // burn the MOAT that is received from removeLiquidity.\\n        _burn(address(this), balanceOf[address(this)]);\\n    }\\n\\n    function removeLiquidity() internal {\\n        bool isInsideRange = false;\\n\\n        uint256 numberOfBinsToWithdraw = (getActiveBinId() -\\n            lastRecordedActiveBin);\\n\\n        numberOfBinsToWithdraw = floorLiquidityBin == 0\\n            ? numberOfBinsToWithdraw\\n            : numberOfBinsToWithdraw + 1;\\n\\n        if (\\n            tightLiqBin >= lastRecordedActiveBin &&\\n            tightLiqBin <= lastRecordedActiveBin + numberOfBinsToWithdraw\\n        ) {\\n            isInsideRange = true;\\n        } else {\\n            if (floorLiquidityBin > 0) {\\n                isInsideRange = false;\\n                numberOfBinsToWithdraw++;\\n            }\\n        }\\n\\n        uint256[] memory amounts = new uint256[](numberOfBinsToWithdraw);\\n        uint256[] memory ids = new uint256[](numberOfBinsToWithdraw);\\n\\n        for (uint256 i; i < numberOfBinsToWithdraw; i++) {\\n            ids[i] = lastRecordedActiveBin + i;\\n        }\\n\\n        if (floorLiquidityBin != 0) {\\n            ids[ids.length - 1] = floorLiquidityBin;\\n\\n            if (!isInsideRange) ids[numberOfBinsToWithdraw - 2] = tightLiqBin;\\n        }\\n\\n        lastRecordedActiveBin = getActiveBinId();\\n\\n        for (uint256 i; i < numberOfBinsToWithdraw; i++) {\\n            uint256 LBTokenAmount = pair.balanceOf(address(this), ids[i]);\\n\\n            amounts[i] = LBTokenAmount;\\n        }\\n\\n        pair.burn(address(this), address(this), ids, amounts);\\n    }\\n\\n    function addLiquidity(\\n        int256[] memory deltaIds,\\n        uint256[] memory distributionX,\\n        uint256[] memory distributionY,\\n        uint24 activeIdDesired\\n    ) internal {\\n        uint256 amountX = balanceOf[address(this)];\\n        uint256 amountY = IERC20(NATIVE).balanceOf(address(this));\\n\\n        uint256 amountXmin = (amountX * slippageToleranceMultiplier) / 100; // We allow 1% amount slippage\\n        uint256 amountYmin = (amountY * slippageToleranceMultiplier) / 100; // We allow 1% amount slippage\\n\\n        uint256 idSlippage = 0;\\n\\n        ILBRouter.LiquidityParameters memory liquidityParameters = ILBRouter\\n            .LiquidityParameters(\\n                IERC20(address(this)),\\n                IERC20(NATIVE),\\n                binStep,\\n                amountX,\\n                amountY,\\n                amountXmin,\\n                amountYmin,\\n                activeIdDesired, //activeIdDesired\\n                idSlippage,\\n                deltaIds,\\n                distributionX,\\n                distributionY,\\n                address(this),\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        joeRouter.addLiquidity(liquidityParameters);\\n    }\\n\\n    //=============================================================================\\n    // Tax and transfer mechanism\\n    //=============================================================================\\n\\n    /**\\n     * @notice charge tax on sells and buys functions.\\n     *     @return _amount remaining to the sender\\n     */\\n\\n    function chargeTax(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256 _amount) {\\n        _amount = amount;\\n        if (feesEnabled && !isRebalancing) {\\n            // buy tax\\n            if (from == address(pair) && to != (address(this))) {\\n                // todo: figure out fee split\\n                uint256 devFee = calculateFee(_amount, 15); // 1.5%\\n                uint256 founderFee = calculateFee(_amount, 10); // 1%\\n\\n                balanceOf[devWallet] += devFee;\\n                emit Transfer(from, devWallet, devFee);\\n\\n                balanceOf[founderWallet] += founderFee;\\n                emit Transfer(from, founderWallet, founderFee);\\n\\n                _amount -= devFee;\\n                _amount -= founderFee;\\n            }\\n\\n            // sell tax\\n            if (from == address(joeRouter) && to == address(pair)) {\\n                uint256 sendToVault;\\n                if (getActiveBinId() == floorLiquidityBin) {\\n                    sendToVault = calculateFee(_amount, stakeFee);\\n                    balanceOf[vault] += sendToVault;\\n                    emit Transfer(from, vault, sendToVault);\\n                    _amount -= sendToVault;\\n                } else {\\n                    sendToVault = calculateFee(_amount, stakeFee);\\n                    balanceOf[vault] += sendToVault;\\n                    emit Transfer(from, vault, sendToVault);\\n                    _amount -= (sendToVault);\\n                }\\n            }\\n        }\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        if (tradingEnabled == false) {\\n            revert(\\\"Trading is not enabled\\\");\\n        }\\n        balanceOf[msg.sender] -= amount;\\n\\n        uint256 _amount = chargeTax(msg.sender, to, amount);\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += _amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, _amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        if (tradingEnabled == false) {\\n            require(from == address(this));\\n        }\\n        // @dev check that to and from aren't on blacklist\\n        require(\\n            !blacklist[to] && !blacklist[from],\\n            \\\"error: invalid liquidity pool\\\"\\n        );\\n\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) {\\n            allowance[from][msg.sender] = allowed - amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        uint256 _amount = chargeTax(msg.sender, to, amount);\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += _amount;\\n        }\\n\\n        emit Transfer(from, to, _amount);\\n\\n        return true;\\n    }\\n\\n    //=============================================================================\\n    // Helpers\\n    //=============================================================================\\n\\n    function calculateFee(\\n        uint256 amount,\\n        uint256 pct\\n    ) public pure returns (uint256) {\\n        uint256 feePercentage = Constants.PRECISION.mul(pct).div(1000); // x pct\\n        return amount.mul(feePercentage).div(Constants.PRECISION);\\n    }\\n\\n    /**\\n     * @notice Helper func.\\n     */\\n    function getAverageTokenPrice(\\n        uint256 totalETH,\\n        uint256 totalTokens\\n    ) public pure returns (uint256) {\\n        require(totalETH < totalTokens, \\\"ETH must be less than total tokens\\\");\\n\\n        return (totalETH * Constants.PRECISION) / (totalTokens);\\n    }\\n\\n    /**\\n     * @notice returns the current floor price\\n     */\\n    function getFloorPrice() public view returns (uint256) {\\n        return joeRouter.getPriceFromId(pair, floorLiquidityBin);\\n    }\\n\\n    /**\\n     * @notice Get's the pool active bin id.\\n     */\\n    function getActiveBinId() public view returns (uint24) {\\n        return pair.getActiveId();\\n    }\\n\\n    function feeReceiver() public view returns (address) {\\n        return owner();\\n    }\\n\\n    //=============================================================================\\n    // ADMIN\\n    //=============================================================================\\n\\n    /**\\n     * @notice approvals for joe router.\\n     */\\n    function approvals() public onlyOwner {\\n        allowance[address(this)][address(joeRouter)] = 2 ** 256 - 1;\\n        IERC20(NATIVE).approve(address(joeRouter), 2 ** 256 - 1);\\n\\n        ILBToken(address(pair)).approveForAll(address(joeRouter), true);\\n        ILBToken(address(pair)).approveForAll(address(pair), true);\\n    }\\n\\n    /**\\n     * @notice only admin function to disable rebalances and fees in case of bugs.\\n     *     @param rebalances bool rebalances enabled?.\\n     *     @param fees bool fees enabled?\\n     */\\n    function disableRebalances(bool rebalances, bool fees) external onlyOwner {\\n        rebalancesEnabled = rebalances;\\n        feesEnabled = fees;\\n    }\\n\\n    // in case of bugs in the staking contract we send to a new vault\\n    function setNewVault(address newVault) external onlyOwner {\\n        vault = newVault;\\n    }\\n\\n    function openTrading() external onlyOwner {\\n        tradingEnabled = true;\\n    }\\n\\n    function setSlippageToleranceMultiplier(\\n        uint256 newSlippageTolerance\\n    ) external onlyOwner {\\n        require(\\n            newSlippageTolerance > 0 && newSlippageTolerance <= 99,\\n            \\\"out of slippage range (1-99)\\\"\\n        );\\n        slippageToleranceMultiplier = newSlippageTolerance;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x172558c5c8c5046d4bda1b8aa37e8d68aeda72be49b0fd2f7e669d68389a93e8\",\"license\":\"MIT\"},\"contracts/moat/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/// @title Joe V1 Factory Interface\\n/// @notice Interface to interact with Joe V1 Factory\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x7ba524c998b232940e31bb23442fbd169b713139a7c3732c230fdc2f1cfca95f\",\"license\":\"GPL-3.0\"},\"contracts/moat/interfaces/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/**\\n * @title Liquidity Book Factory Interface\\n * @author Trader Joe\\n * @notice Required interface of LBFactory contract\\n */\\ninterface ILBFactory is IPendingOwnable {\\n    error LBFactory__IdenticalAddresses(IERC20 token);\\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__AddressZero();\\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\n    error LBFactory__BinStepTooLow(uint256 binStep);\\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\\n    error LBFactory__SameFeeRecipient(address feeRecipient);\\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\n    error LBFactory__SameImplementation(address LBPairImplementation);\\n    error LBFactory__ImplementationNotSet();\\n\\n    /**\\n     * @dev Structure to store the LBPair information, such as:\\n     * binStep: The bin step of the LBPair\\n     * LBPair: The address of the LBPair\\n     * createdByOwner: Whether the pair was created by the owner of the factory\\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n     */\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function getMinBinStep() external pure returns (uint256);\\n\\n    function getFeeRecipient() external view returns (address);\\n\\n    function getMaxFlashLoanFee() external pure returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getLBPairImplementation() external view returns (address);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint256 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            bool isOpen\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address lbPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        bool isOpen\\n    ) external;\\n\\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBPair lbPair) external;\\n}\\n\",\"keccak256\":\"0x436bd62dcc69fe2289b9773ceb1097b4c82e08ac582a0a6f4a727ed87ddad343\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x95b7da167c9c93541135f07dda11378b5cb2f3b8ac272f166bc5286fc12f0130\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBLegacyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/// @title Liquidity Book Factory Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBFactory contract\\ninterface ILBLegacyFactory is IPendingOwnable {\\n    /// @dev Structure to store the LBPair information, such as:\\n    /// - binStep: The bin step of the LBPair\\n    /// - LBPair: The address of the LBPair\\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBLegacyPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBLegacyPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event FeeParametersSet(\\n        address indexed sender,\\n        ILBLegacyPair indexed LBPair,\\n        uint256 binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event FactoryLockedStatusUpdated(bool unlocked);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBLegacyPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator,\\n        uint256 sampleLifetime\\n    );\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function MAX_FEE() external pure returns (uint256);\\n\\n    function MIN_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_PROTOCOL_SHARE() external pure returns (uint256);\\n\\n    function LBPairImplementation() external view returns (address);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAsset(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function flashLoanFee() external view returns (uint256);\\n\\n    function creationUnlocked() external view returns (bool);\\n\\n    function allLBPairs(uint256 id) external returns (ILBLegacyPair);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint16 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            uint256 sampleLifetime\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address LBPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint256 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint16 sampleLifetime\\n    ) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function setFactoryLockedState(bool locked) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBLegacyPair LBPair) external;\\n}\\n\",\"keccak256\":\"0x0fda19ed4c71561d94dda1450f14fff189266091b3626973919e429c6adb8447\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBLegacyPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyToken} from \\\"./ILBLegacyToken.sol\\\";\\n\\n/// @title Liquidity Book Pair V2 Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBPair contract\\ninterface ILBLegacyPair is ILBLegacyToken {\\n    /// @dev Structure to store the protocol fees:\\n    /// - binStep: The bin step\\n    /// - baseFactor: The base factor\\n    /// - filterPeriod: The filter period, where the fees stays constant\\n    /// - decayPeriod: The decay period, where the fees are halved\\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\\n    /// - protocolShare: The share of fees sent to protocol\\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\\n    /// - volatilityAccumulated: The value of volatility accumulated\\n    /// - volatilityReference: The value of volatility reference\\n    /// - indexRef: The index reference\\n    /// - time: The last time the accumulator was called\\n    struct FeeParameters {\\n        // 144 lowest bits in slot\\n        uint16 binStep;\\n        uint16 baseFactor;\\n        uint16 filterPeriod;\\n        uint16 decayPeriod;\\n        uint16 reductionFactor;\\n        uint24 variableFeeControl;\\n        uint16 protocolShare;\\n        uint24 maxVolatilityAccumulated;\\n        // 112 highest bits in slot\\n        uint24 volatilityAccumulated;\\n        uint24 volatilityReference;\\n        uint24 indexRef;\\n        uint40 time;\\n    }\\n\\n    /// @dev Structure used during swaps to distributes the fees:\\n    /// - total: The total amount of fees\\n    /// - protocol: The amount of fees reserved for protocol\\n    struct FeesDistribution {\\n        uint128 total;\\n        uint128 protocol;\\n    }\\n\\n    /// @dev Structure to store the reserves of bins:\\n    /// - reserveX: The current reserve of tokenX of the bin\\n    /// - reserveY: The current reserve of tokenY of the bin\\n    struct Bin {\\n        uint112 reserveX;\\n        uint112 reserveY;\\n        uint256 accTokenXPerShare;\\n        uint256 accTokenYPerShare;\\n    }\\n\\n    /// @dev Structure to store the information of the pair such as:\\n    /// slot0:\\n    /// - activeId: The current id used for swaps, this is also linked with the price\\n    /// - reserveX: The sum of amounts of tokenX across all bins\\n    /// slot1:\\n    /// - reserveY: The sum of amounts of tokenY across all bins\\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\\n    /// - oracleSize: The current size of the oracle, can be increase by users\\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\\n    /// - oracleId: The current id of the oracle\\n    /// slot2:\\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\\n    /// slot3:\\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\\n    struct PairInformation {\\n        uint24 activeId;\\n        uint136 reserveX;\\n        uint136 reserveY;\\n        uint16 oracleSampleLifetime;\\n        uint16 oracleSize;\\n        uint16 oracleActiveSize;\\n        uint40 oracleLastTimestamp;\\n        uint16 oracleId;\\n        FeesDistribution feesX;\\n        FeesDistribution feesY;\\n    }\\n\\n    /// @dev Structure to store the debts of users\\n    /// - debtX: The tokenX's debt\\n    /// - debtY: The tokenY's debt\\n    struct Debts {\\n        uint256 debtX;\\n        uint256 debtY;\\n    }\\n\\n    /// @dev Structure to store fees:\\n    /// - tokenX: The amount of fees of token X\\n    /// - tokenY: The amount of fees of token Y\\n    struct Fees {\\n        uint128 tokenX;\\n        uint128 tokenY;\\n    }\\n\\n    /// @dev Structure to minting informations:\\n    /// - amountXIn: The amount of token X sent\\n    /// - amountYIn: The amount of token Y sent\\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\\n    /// - activeFeeX: Fees X currently generated\\n    /// - activeFeeY: Fees Y currently generated\\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\\n    /// - id: Id of the current working bin when looping on the distribution array\\n    /// - amountX: The amount of token X deposited in the current bin\\n    /// - amountY: The amount of token Y deposited in the current bin\\n    /// - distributionX: Distribution of token X for the current working bin\\n    /// - distributionY: Distribution of token Y for the current working bin\\n    struct MintInfo {\\n        uint256 amountXIn;\\n        uint256 amountYIn;\\n        uint256 amountXAddedToPair;\\n        uint256 amountYAddedToPair;\\n        uint256 activeFeeX;\\n        uint256 activeFeeY;\\n        uint256 totalDistributionX;\\n        uint256 totalDistributionY;\\n        uint256 id;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 distributionX;\\n        uint256 distributionY;\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        bool swapForY,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 volatilityAccumulated,\\n        uint256 fees\\n    );\\n\\n    event FlashLoan(address indexed sender, address indexed receiver, IERC20 token, uint256 amount, uint256 fee);\\n\\n    event CompositionFee(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 feesX, uint256 feesY\\n    );\\n\\n    event DepositedToBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event WithdrawnFromBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function factory() external view returns (address);\\n\\n    function getReservesAndId() external view returns (uint256 reserveX, uint256 reserveY, uint256 activeId);\\n\\n    function getGlobalFees()\\n        external\\n        view\\n        returns (uint128 feesXTotal, uint128 feesYTotal, uint128 feesXProtocol, uint128 feesYProtocol);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (\\n            uint256 oracleSampleLifetime,\\n            uint256 oracleSize,\\n            uint256 oracleActiveSize,\\n            uint256 oracleLastTimestamp,\\n            uint256 oracleId,\\n            uint256 min,\\n            uint256 max\\n        );\\n\\n    function getOracleSampleFrom(uint256 timeDelta)\\n        external\\n        view\\n        returns (uint256 cumulativeId, uint256 cumulativeAccumulator, uint256 cumulativeBinCrossed);\\n\\n    function feeParameters() external view returns (FeeParameters memory);\\n\\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\\n\\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\\n\\n    function pendingFees(address account, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n\\n    function flashLoan(address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n\\n    function mint(\\n        uint256[] calldata ids,\\n        uint256[] calldata distributionX,\\n        uint256[] calldata distributionY,\\n        address to\\n    ) external returns (uint256 amountXAddedToPair, uint256 amountYAddedToPair, uint256[] memory liquidityMinted);\\n\\n    function burn(uint256[] calldata ids, uint256[] calldata amounts, address to)\\n        external\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function increaseOracleLength(uint16 newSize) external;\\n\\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\\n\\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\\n\\n    function setFeesParameters(bytes32 packedFeeParameters) external;\\n\\n    function forceDecay() external;\\n\\n    function initialize(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint24 activeId,\\n        uint16 sampleLifetime,\\n        bytes32 packedFeeParameters\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6ed88e05f0be9d8b4f0af12c6b1b970456256a323fd90faccedda600a12a3ec5\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBLegacyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/// @title Liquidity Book Router Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBRouter contract\\ninterface ILBLegacyRouter {\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        uint256 deadline;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function wavax() external view returns (address);\\n\\n    function oldFactory() external view returns (address);\\n\\n    function getIdFromPrice(ILBLegacyPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBLegacyPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBLegacyPair lbPair, uint256 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountIn, uint256 feesIn);\\n\\n    function getSwapOut(ILBLegacyPair lbPair, uint256 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountOut, uint256 feesIn);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function addLiquidityAVAX(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityAVAX(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0x75e754631cc75e21dadc8efe871de9f7070bf0de7bf5b4580cddcb7f5369fcc8\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBLegacyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../../@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Liquidity Book V2 Token Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBToken contract\\ninterface ILBLegacyToken is IERC165 {\\n    event TransferSingle(address indexed sender, address indexed from, address indexed to, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory batchBalances);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function setApprovalForAll(address sender, bool approved) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount) external;\\n\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata id, uint256[] calldata amount)\\n        external;\\n}\\n\",\"keccak256\":\"0x1eff7d6f2c8ecc1fdf4afeb5495189c7510bae63b3b61245b28e09798ea6816f\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBFlashLoanCallback} from \\\"./ILBFlashLoanCallback.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\n\\ninterface ILBPair is ILBToken {\\n    error LBPair__ZeroBorrowAmount();\\n    error LBPair__AddressZero();\\n    error LBPair__AlreadyInitialized();\\n    error LBPair__EmptyMarketConfigs();\\n    error LBPair__FlashLoanCallbackFailed();\\n    error LBPair__FlashLoanInsufficientAmount();\\n    error LBPair__InsufficientAmountIn();\\n    error LBPair__InsufficientAmountOut();\\n    error LBPair__InvalidInput();\\n    error LBPair__InvalidStaticFeeParameters();\\n    error LBPair__OnlyFactory();\\n    error LBPair__OnlyProtocolFeeRecipient();\\n    error LBPair__OutOfLiquidity();\\n    error LBPair__TokenNotSupported();\\n    error LBPair__ZeroAmount(uint24 id);\\n    error LBPair__ZeroAmountsOut(uint24 id);\\n    error LBPair__ZeroShares(uint24 id);\\n    error LBPair__MaxTotalFeeExceeded();\\n\\n    struct MintArrays {\\n        uint256[] ids;\\n        bytes32[] amounts;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\\n\\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint24 id,\\n        bytes32 amountsIn,\\n        bytes32 amountsOut,\\n        uint24 volatilityAccumulator,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event StaticFeeParametersSet(\\n        address indexed sender,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        uint24 activeId,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\\n\\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\\n\\n    function initialize(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint24 activeId\\n    ) external;\\n\\n    function getFactory() external view returns (ILBFactory factory);\\n\\n    function getTokenX() external view returns (IERC20 tokenX);\\n\\n    function getTokenY() external view returns (IERC20 tokenY);\\n\\n    function getBinStep() external view returns (uint16 binStep);\\n\\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\\n\\n    function getActiveId() external view returns (uint24 activeId);\\n\\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\\n\\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\\n\\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\\n\\n    function getStaticFeeParameters()\\n        external\\n        view\\n        returns (\\n            uint16 baseFactor,\\n            uint16 filterPeriod,\\n            uint16 decayPeriod,\\n            uint16 reductionFactor,\\n            uint24 variableFeeControl,\\n            uint16 protocolShare,\\n            uint24 maxVolatilityAccumulator\\n        );\\n\\n    function getVariableFeeParameters()\\n        external\\n        view\\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\\n\\n    function getOracleSampleAt(uint40 lookupTimestamp)\\n        external\\n        view\\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\\n\\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\\n\\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\\n\\n    function getSwapIn(uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\\n\\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\\n\\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\\n        external\\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\\n\\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\\n        external\\n        returns (bytes32[] memory amounts);\\n\\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\\n\\n    function increaseOracleLength(uint16 newLength) external;\\n\\n    function setStaticFeeParameters(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function forceDecay() external;\\n}\\n\",\"keccak256\":\"0x5df401a7cdcb89d4c9bb1d4c52739fd16d878428ddace9b821311eee9ce1eb4b\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBLegacyFactory} from \\\"./ILBLegacyFactory.sol\\\";\\nimport {ILBLegacyRouter} from \\\"./ILBLegacyRouter.sol\\\";\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/**\\n * @title Liquidity Book Router Interface\\n * @author Trader Joe\\n * @notice Required interface of LBRouter contract\\n */\\ninterface ILBRouter {\\n    error LBRouter__SenderIsNotWNATIVE();\\n    error LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\\n    error LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\\n    error LBRouter__SwapOverflows(uint256 id);\\n    error LBRouter__BrokenSwapSafetyCheck();\\n    error LBRouter__NotFactoryOwner();\\n    error LBRouter__TooMuchTokensIn(uint256 excess);\\n    error LBRouter__BinReserveOverflows(uint256 id);\\n    error LBRouter__IdOverflows(int256 id);\\n    error LBRouter__LengthsMismatch();\\n    error LBRouter__WrongTokenOrder();\\n    error LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\\n    error LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\\n    error LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\\n    error LBRouter__FailedToSendNATIVE(address recipient, uint256 amount);\\n    error LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\\n    error LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\\n    error LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\\n    error LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\\n    error LBRouter__InvalidTokenPath(address wrongToken);\\n    error LBRouter__InvalidVersion(uint256 version);\\n    error LBRouter__WrongNativeLiquidityParameters(\\n        address tokenX, address tokenY, uint256 amountX, uint256 amountY, uint256 msgValue\\n    );\\n\\n    /**\\n     * @dev This enum represents the version of the pair requested\\n     * - V1: Joe V1 pair\\n     * - V2: LB pair V2. Also called legacyPair\\n     * - V2_1: LB pair V2.1 (current version)\\n     */\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1\\n    }\\n\\n    /**\\n     * @dev The liquidity parameters, such as:\\n     * - tokenX: The address of token X\\n     * - tokenY: The address of token Y\\n     * - binStep: The bin step of the pair\\n     * - amountX: The amount to send of token X\\n     * - amountY: The amount to send of token Y\\n     * - amountXMin: The min amount of token X added to liquidity\\n     * - amountYMin: The min amount of token Y added to liquidity\\n     * - activeIdDesired: The active id that user wants to add liquidity from\\n     * - idSlippage: The number of id that are allowed to slip\\n     * - deltaIds: The list of delta ids to add liquidity (`deltaId = activeId - desiredId`)\\n     * - distributionX: The distribution of tokenX with sum(distributionX) = 100e18 (100%) or 0 (0%)\\n     * - distributionY: The distribution of tokenY with sum(distributionY) = 100e18 (100%) or 0 (0%)\\n     * - to: The address of the recipient\\n     * - refundTo: The address of the recipient of the refunded tokens if too much tokens are sent\\n     * - deadline: The deadline of the transaction\\n     */\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        address refundTo;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev The path parameters, such as:\\n     * - pairBinSteps: The list of bin steps of the pairs to go through\\n     * - versions: The list of versions of the pairs to go through\\n     * - tokenPath: The list of tokens in the path to go through\\n     */\\n    struct Path {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function getFactory() external view returns (ILBFactory);\\n\\n    function getLegacyFactory() external view returns (ILBLegacyFactory);\\n\\n    function getV1Factory() external view returns (IJoeFactory);\\n\\n    function getLegacyRouter() external view returns (ILBLegacyRouter);\\n\\n    function getWNATIVE() external view returns (IWNATIVE);\\n\\n    function getIdFromPrice(ILBPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBPair LBPair, uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(ILBPair LBPair, uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function addLiquidityNATIVE(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityNATIVE(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountNATIVEMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountNATIVE);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVE(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokens(uint256 amountOutMin, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactNATIVE(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapNATIVEForExactTokens(uint256 amountOut, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVESupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0xeebc63883dc5587e914f7cd257ec9bc28a949a4fa55c402513cd2e0a9738731d\",\"license\":\"MIT\"},\"contracts/moat/interfaces/ILBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Token Interface\\n * @author Trader Joe\\n * @notice Interface to interact with the LBToken.\\n */\\ninterface ILBToken {\\n    error LBToken__AddressThisOrZero();\\n    error LBToken__InvalidLength();\\n    error LBToken__SelfApproval(address owner);\\n    error LBToken__SpenderNotApproved(address from, address spender);\\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function approveForAll(address spender, bool approved) external;\\n\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0xde38a9a58e3e95314106f73e8aeaa45d8f89237644531e9f97129542ffd19c81\",\"license\":\"MIT\"},\"contracts/moat/interfaces/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Pending Ownable Interface\\n * @author Trader Joe\\n * @notice Required interface of Pending Ownable contract used for LBFactory\\n */\\ninterface IPendingOwnable {\\n    error PendingOwnable__AddressZero();\\n    error PendingOwnable__NoPendingOwner();\\n    error PendingOwnable__NotOwner();\\n    error PendingOwnable__NotPendingOwner();\\n    error PendingOwnable__PendingOwnerAlreadySet();\\n\\n    event PendingOwnerSet(address indexed pendingOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0xca596ca84a58cf4e9665afd027304c78efdd5c5a5265c9c61530bf2c1da28a08\",\"license\":\"MIT\"},\"contracts/moat/interfaces/IWNATIVE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title WNATIVE Interface\\n * @notice Required interface of Wrapped NATIVE contract\\n */\\ninterface IWNATIVE is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x5548eea96e26984170eb3bb9f7b7f4f28670f3017d5fff2459348425b4bf040a\",\"license\":\"MIT\"},\"contracts/moat/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Constants Library\\n * @author Trader Joe\\n * @notice Set of constants for Liquidity Book contracts\\n */\\nlibrary Constants {\\n    uint8 internal constant SCALE_OFFSET = 128;\\n    uint256 internal constant SCALE = 1 << SCALE_OFFSET;\\n\\n    uint256 internal constant PRECISION = 1e18;\\n    uint256 internal constant SQUARED_PRECISION = PRECISION * PRECISION;\\n\\n    uint256 internal constant MAX_FEE = 0.1e18; // 10%\\n    uint256 internal constant MAX_PROTOCOL_SHARE = 2_500; // 25% of the fee\\n\\n    uint256 internal constant BASIS_POINT_MAX = 10_000;\\n\\n    /// @dev The expected return after a successful flash loan\\n    bytes32 internal constant CALLBACK_SUCCESS = keccak256(\\\"LBPair.onFlashLoan\\\");\\n}\\n\",\"keccak256\":\"0x51398412331e90c15b06e4637478353d4a6f64d5171fb85628a26927e633d4a7\",\"license\":\"MIT\"},\"contracts/moat/libraries/PriceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Uint128x128Math} from \\\"./math/Uint128x128Math.sol\\\";\\nimport {Uint256x256Math} from \\\"./math/Uint256x256Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Liquidity Book Price Helper Library\\n * @author Trader Joe\\n * @notice This library contains functions to calculate prices\\n */\\nlibrary PriceHelper {\\n    using Uint128x128Math for uint256;\\n    using Uint256x256Math for uint256;\\n    using SafeCast for uint256;\\n\\n    int256 private constant REAL_ID_SHIFT = 1 << 23;\\n\\n    /**\\n     * @dev Calculates the price from the id and the bin step\\n     * @param id The id\\n     * @param binStep The bin step\\n     * @return price The price as a 128.128-binary fixed-point number\\n     */\\n    function getPriceFromId(uint24 id, uint16 binStep) internal pure returns (uint256 price) {\\n        uint256 base = getBase(binStep);\\n        int256 exponent = getExponent(id);\\n\\n        price = base.pow(exponent);\\n    }\\n\\n    /**\\n     * @dev Calculates the id from the price and the bin step\\n     * @param price The price as a 128.128-binary fixed-point number\\n     * @param binStep The bin step\\n     * @return id The id\\n     */\\n    function getIdFromPrice(uint256 price, uint16 binStep) internal pure returns (uint24 id) {\\n        uint256 base = getBase(binStep);\\n        int256 realId = price.log2() / base.log2();\\n\\n        unchecked {\\n            id = uint256(REAL_ID_SHIFT + realId).safe24();\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the base from the bin step, which is `1 + binStep / BASIS_POINT_MAX`\\n     * @param binStep The bin step\\n     * @return base The base\\n     */\\n    function getBase(uint16 binStep) internal pure returns (uint256) {\\n        unchecked {\\n            return Constants.SCALE + (uint256(binStep) << Constants.SCALE_OFFSET) / Constants.BASIS_POINT_MAX;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exponent from the id, which is `id - REAL_ID_SHIFT`\\n     * @param id The id\\n     * @return exponent The exponent\\n     */\\n    function getExponent(uint24 id) internal pure returns (int256) {\\n        unchecked {\\n            return int256(uint256(id)) - REAL_ID_SHIFT;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a price with 18 decimals to a 128.128-binary fixed-point number\\n     * @param price The price with 18 decimals\\n     * @return price128x128 The 128.128-binary fixed-point number\\n     */\\n    function convertDecimalPriceTo128x128(uint256 price) internal pure returns (uint256) {\\n        return price.shiftDivRoundDown(Constants.SCALE_OFFSET, Constants.PRECISION);\\n    }\\n\\n    /**\\n     * @dev Converts a 128.128-binary fixed-point number to a price with 18 decimals\\n     * @param price128x128 The 128.128-binary fixed-point number\\n     * @return price The price with 18 decimals\\n     */\\n    function convert128x128PriceToDecimal(uint256 price128x128) internal pure returns (uint256) {\\n        return price128x128.mulShiftRoundDown(Constants.PRECISION, Constants.SCALE_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb8e1b24c8129634b981f6c1c8822962a6bbf023e312bebcad7d0e9d468848615\",\"license\":\"MIT\"},\"contracts/moat/libraries/math/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Bit Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for bit calculations\\n */\\nlibrary BitMath {\\n    /**\\n     * @dev Returns the index of the closest bit on the right of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the right of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitRight(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            uint256 shift = 255 - bit;\\n            x <<= shift;\\n\\n            // can't overflow as it's non-zero and we shifted it by `_shift`\\n            return (x == 0) ? type(uint256).max : mostSignificantBit(x) - shift;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the closest bit on the left of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the left of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitLeft(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            x >>= bit;\\n\\n            return (x == 0) ? type(uint256).max : leastSignificantBit(x) + bit;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the most significant bit of x\\n     * This function returns 0 if x is 0\\n     * @param x The value as a uint256\\n     * @return msb The index of the most significant bit of x\\n     */\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 msb) {\\n        assembly {\\n            if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                x := shr(128, x)\\n                msb := 128\\n            }\\n            if gt(x, 0xffffffffffffffff) {\\n                x := shr(64, x)\\n                msb := add(msb, 64)\\n            }\\n            if gt(x, 0xffffffff) {\\n                x := shr(32, x)\\n                msb := add(msb, 32)\\n            }\\n            if gt(x, 0xffff) {\\n                x := shr(16, x)\\n                msb := add(msb, 16)\\n            }\\n            if gt(x, 0xff) {\\n                x := shr(8, x)\\n                msb := add(msb, 8)\\n            }\\n            if gt(x, 0xf) {\\n                x := shr(4, x)\\n                msb := add(msb, 4)\\n            }\\n            if gt(x, 0x3) {\\n                x := shr(2, x)\\n                msb := add(msb, 2)\\n            }\\n            if gt(x, 0x1) { msb := add(msb, 1) }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the least significant bit of x\\n     * This function returns 255 if x is 0\\n     * @param x The value as a uint256\\n     * @return lsb The index of the least significant bit of x\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 lsb) {\\n        assembly {\\n            let sx := shl(128, x)\\n            if iszero(iszero(sx)) {\\n                lsb := 128\\n                x := sx\\n            }\\n            sx := shl(64, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 64)\\n            }\\n            sx := shl(32, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 32)\\n            }\\n            sx := shl(16, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 16)\\n            }\\n            sx := shl(8, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 8)\\n            }\\n            sx := shl(4, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 4)\\n            }\\n            sx := shl(2, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 2)\\n            }\\n            if iszero(iszero(shl(1, x))) { lsb := add(lsb, 1) }\\n\\n            lsb := sub(255, lsb)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa6411022d4cbcc0be4975f5ad9b6ccd7eeeb09eeae6b245c1c6dfd2b0f9f70a\",\"license\":\"MIT\"},\"contracts/moat/libraries/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Safe Cast Library\\n * @author Trader Joe\\n * @notice This library contains functions to safely cast uint256 to different uint types.\\n */\\nlibrary SafeCast {\\n    error SafeCast__Exceeds248Bits();\\n    error SafeCast__Exceeds240Bits();\\n    error SafeCast__Exceeds232Bits();\\n    error SafeCast__Exceeds224Bits();\\n    error SafeCast__Exceeds216Bits();\\n    error SafeCast__Exceeds208Bits();\\n    error SafeCast__Exceeds200Bits();\\n    error SafeCast__Exceeds192Bits();\\n    error SafeCast__Exceeds184Bits();\\n    error SafeCast__Exceeds176Bits();\\n    error SafeCast__Exceeds168Bits();\\n    error SafeCast__Exceeds160Bits();\\n    error SafeCast__Exceeds152Bits();\\n    error SafeCast__Exceeds144Bits();\\n    error SafeCast__Exceeds136Bits();\\n    error SafeCast__Exceeds128Bits();\\n    error SafeCast__Exceeds120Bits();\\n    error SafeCast__Exceeds112Bits();\\n    error SafeCast__Exceeds104Bits();\\n    error SafeCast__Exceeds96Bits();\\n    error SafeCast__Exceeds88Bits();\\n    error SafeCast__Exceeds80Bits();\\n    error SafeCast__Exceeds72Bits();\\n    error SafeCast__Exceeds64Bits();\\n    error SafeCast__Exceeds56Bits();\\n    error SafeCast__Exceeds48Bits();\\n    error SafeCast__Exceeds40Bits();\\n    error SafeCast__Exceeds32Bits();\\n    error SafeCast__Exceeds24Bits();\\n    error SafeCast__Exceeds16Bits();\\n    error SafeCast__Exceeds8Bits();\\n\\n    /**\\n     * @dev Returns x on uint248 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint248\\n     */\\n    function safe248(uint256 x) internal pure returns (uint248 y) {\\n        if ((y = uint248(x)) != x) revert SafeCast__Exceeds248Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint240 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint240\\n     */\\n    function safe240(uint256 x) internal pure returns (uint240 y) {\\n        if ((y = uint240(x)) != x) revert SafeCast__Exceeds240Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint232 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint232\\n     */\\n    function safe232(uint256 x) internal pure returns (uint232 y) {\\n        if ((y = uint232(x)) != x) revert SafeCast__Exceeds232Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint224 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint224\\n     */\\n    function safe224(uint256 x) internal pure returns (uint224 y) {\\n        if ((y = uint224(x)) != x) revert SafeCast__Exceeds224Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint216 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint216\\n     */\\n    function safe216(uint256 x) internal pure returns (uint216 y) {\\n        if ((y = uint216(x)) != x) revert SafeCast__Exceeds216Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint208 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint208\\n     */\\n    function safe208(uint256 x) internal pure returns (uint208 y) {\\n        if ((y = uint208(x)) != x) revert SafeCast__Exceeds208Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint200 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint200\\n     */\\n    function safe200(uint256 x) internal pure returns (uint200 y) {\\n        if ((y = uint200(x)) != x) revert SafeCast__Exceeds200Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint192 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint192\\n     */\\n    function safe192(uint256 x) internal pure returns (uint192 y) {\\n        if ((y = uint192(x)) != x) revert SafeCast__Exceeds192Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint184 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint184\\n     */\\n    function safe184(uint256 x) internal pure returns (uint184 y) {\\n        if ((y = uint184(x)) != x) revert SafeCast__Exceeds184Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint176 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint176\\n     */\\n    function safe176(uint256 x) internal pure returns (uint176 y) {\\n        if ((y = uint176(x)) != x) revert SafeCast__Exceeds176Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint168 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint168\\n     */\\n    function safe168(uint256 x) internal pure returns (uint168 y) {\\n        if ((y = uint168(x)) != x) revert SafeCast__Exceeds168Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint160 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint160\\n     */\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        if ((y = uint160(x)) != x) revert SafeCast__Exceeds160Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint152 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint152\\n     */\\n    function safe152(uint256 x) internal pure returns (uint152 y) {\\n        if ((y = uint152(x)) != x) revert SafeCast__Exceeds152Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint144 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint144\\n     */\\n    function safe144(uint256 x) internal pure returns (uint144 y) {\\n        if ((y = uint144(x)) != x) revert SafeCast__Exceeds144Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint136 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint136\\n     */\\n    function safe136(uint256 x) internal pure returns (uint136 y) {\\n        if ((y = uint136(x)) != x) revert SafeCast__Exceeds136Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint128 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint128\\n     */\\n    function safe128(uint256 x) internal pure returns (uint128 y) {\\n        if ((y = uint128(x)) != x) revert SafeCast__Exceeds128Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint120 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint120\\n     */\\n    function safe120(uint256 x) internal pure returns (uint120 y) {\\n        if ((y = uint120(x)) != x) revert SafeCast__Exceeds120Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint112 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint112\\n     */\\n    function safe112(uint256 x) internal pure returns (uint112 y) {\\n        if ((y = uint112(x)) != x) revert SafeCast__Exceeds112Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint104 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint104\\n     */\\n    function safe104(uint256 x) internal pure returns (uint104 y) {\\n        if ((y = uint104(x)) != x) revert SafeCast__Exceeds104Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint96 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint96\\n     */\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        if ((y = uint96(x)) != x) revert SafeCast__Exceeds96Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint88 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint88\\n     */\\n    function safe88(uint256 x) internal pure returns (uint88 y) {\\n        if ((y = uint88(x)) != x) revert SafeCast__Exceeds88Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint80 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint80\\n     */\\n    function safe80(uint256 x) internal pure returns (uint80 y) {\\n        if ((y = uint80(x)) != x) revert SafeCast__Exceeds80Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint72 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint72\\n     */\\n    function safe72(uint256 x) internal pure returns (uint72 y) {\\n        if ((y = uint72(x)) != x) revert SafeCast__Exceeds72Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint64 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint64\\n     */\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        if ((y = uint64(x)) != x) revert SafeCast__Exceeds64Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint56 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint56\\n     */\\n    function safe56(uint256 x) internal pure returns (uint56 y) {\\n        if ((y = uint56(x)) != x) revert SafeCast__Exceeds56Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint48 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint48\\n     */\\n    function safe48(uint256 x) internal pure returns (uint48 y) {\\n        if ((y = uint48(x)) != x) revert SafeCast__Exceeds48Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint40 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint40\\n     */\\n    function safe40(uint256 x) internal pure returns (uint40 y) {\\n        if ((y = uint40(x)) != x) revert SafeCast__Exceeds40Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint32 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint32\\n     */\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        if ((y = uint32(x)) != x) revert SafeCast__Exceeds32Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint24 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint24\\n     */\\n    function safe24(uint256 x) internal pure returns (uint24 y) {\\n        if ((y = uint24(x)) != x) revert SafeCast__Exceeds24Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint16 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint16\\n     */\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        if ((y = uint16(x)) != x) revert SafeCast__Exceeds16Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint8 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint8\\n     */\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        if ((y = uint8(x)) != x) revert SafeCast__Exceeds8Bits();\\n    }\\n}\\n\",\"keccak256\":\"0x3606216af31e4d9e47841c3d8db84674ffd59adf2b60c65bf6242a499f0baf2a\",\"license\":\"MIT\"},\"contracts/moat/libraries/math/Uint128x128Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\n\\n/**\\n * @title Liquidity Book Uint128x128 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for power and log calculations\\n */\\nlibrary Uint128x128Math {\\n    using BitMath for uint256;\\n\\n    error Uint128x128Math__LogUnderflow();\\n    error Uint128x128Math__PowUnderflow(uint256 x, int256 y);\\n\\n    uint256 constant LOG_SCALE_OFFSET = 127;\\n    uint256 constant LOG_SCALE = 1 << LOG_SCALE_OFFSET;\\n    uint256 constant LOG_SCALE_SQUARED = LOG_SCALE * LOG_SCALE;\\n\\n    /**\\n     * @notice Calculates the binary logarithm of x.\\n     * @dev Based on the iterative approximation algorithm.\\n     * https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n     * Requirements:\\n     * - x must be greater than zero.\\n     * Caveats:\\n     * - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation\\n     * Also because x is converted to an unsigned 129.127-binary fixed-point number during the operation to optimize the multiplication\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the binary logarithm.\\n     * @return result The binary logarithm as a signed 128.128-binary fixed-point number.\\n     */\\n    function log2(uint256 x) internal pure returns (int256 result) {\\n        // Convert x to a unsigned 129.127-binary fixed-point number to optimize the multiplication.\\n        // If we use an offset of 128 bits, y would need 129 bits and y**2 would would overflow and we would have to\\n        // use mulDiv, by reducing x to 129.127-binary fixed-point number we assert that y will use 128 bits, and we\\n        // can use the regular multiplication\\n\\n        if (x == 1) return -128;\\n        if (x == 0) revert Uint128x128Math__LogUnderflow();\\n\\n        x >>= 1;\\n\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= LOG_SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas\\n                x = LOG_SCALE_SQUARED / x;\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = (x >> LOG_SCALE_OFFSET).mostSignificantBit();\\n\\n            // The integer part of the logarithm as a signed 129.127-binary fixed-point number. The operation can't overflow\\n            // because n is maximum 255, LOG_SCALE_OFFSET is 127 bits and sign is either 1 or -1.\\n            result = int256(n) << LOG_SCALE_OFFSET;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y != LOG_SCALE) {\\n                // Calculate the fractional part via the iterative approximation.\\n                // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n                for (int256 delta = int256(1 << (LOG_SCALE_OFFSET - 1)); delta > 0; delta >>= 1) {\\n                    y = (y * y) >> LOG_SCALE_OFFSET;\\n\\n                    // Is y^2 > 2 and so in the range [2,4)?\\n                    if (y >= 1 << (LOG_SCALE_OFFSET + 1)) {\\n                        // Add the 2^(-m) factor to the logarithm.\\n                        result += delta;\\n\\n                        // Corresponds to z/2 on Wikipedia.\\n                        y >>= 1;\\n                    }\\n                }\\n            }\\n            // Convert x back to unsigned 128.128-binary fixed-point number\\n            result = (result * sign) << 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the value of x^y. It calculates `1 / x^abs(y)` if x is bigger than 2^128.\\n     * At the end of the operations, we invert the result if needed.\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the power\\n     * @param y A relative number without any decimals, needs to be between ]2^21; 2^21[\\n     */\\n    function pow(uint256 x, int256 y) internal pure returns (uint256 result) {\\n        bool invert;\\n        uint256 absY;\\n\\n        if (y == 0) return Constants.SCALE;\\n\\n        assembly {\\n            absY := y\\n            if slt(absY, 0) {\\n                absY := sub(0, absY)\\n                invert := iszero(invert)\\n            }\\n        }\\n\\n        if (absY < 0x100000) {\\n            result = Constants.SCALE;\\n            assembly {\\n                let squared := x\\n                if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                    squared := div(not(0), squared)\\n                    invert := iszero(invert)\\n                }\\n\\n                if and(absY, 0x1) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x100) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x200) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x400) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x800) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x1000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80000) { result := shr(128, mul(result, squared)) }\\n            }\\n        }\\n\\n        // revert if y is too big or if x^y underflowed\\n        if (result == 0) revert Uint128x128Math__PowUnderflow(x, y);\\n\\n        return invert ? type(uint256).max / result : result;\\n    }\\n}\\n\",\"keccak256\":\"0x77ce0843579913f27080d993d8c2d3c21952bbc03c28cdfc3ca00a5878558bea\",\"license\":\"MIT\"},\"contracts/moat/libraries/math/Uint256x256Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Liquidity Book Uint256x256 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for full precision calculations\\n */\\nlibrary Uint256x256Math {\\n    error Uint256x256Math__MulShiftOverflow();\\n    error Uint256x256Math__MulDivOverflow();\\n\\n    /**\\n     * @notice Calculates floor(x*y/denominator) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        return _getEndOfDivRoundDown(x, y, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x*y/denominator) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        result = mulDivRoundDown(x, y, denominator);\\n        if (mulmod(x, y, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundDown(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        if (prod0 != 0) result = prod0 >> offset;\\n        if (prod1 != 0) {\\n            // Make sure the result is less than 2^256.\\n            if (prod1 >= 1 << offset) {\\n                revert Uint256x256Math__MulShiftOverflow();\\n            }\\n\\n            unchecked {\\n                result += prod1 << (256 - offset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundUp(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        result = mulShiftRoundDown(x, y, offset);\\n        if (mulmod(x, y, 1 << offset) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x << offset / y) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundDown(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n\\n        prod0 = x << offset; // Least significant 256 bits of the product\\n        unchecked {\\n            prod1 = x >> (256 - offset); // Most significant 256 bits of the product\\n        }\\n\\n        return _getEndOfDivRoundDown(x, 1 << offset, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x << offset / y) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundUp(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        result = shiftDivRoundDown(x, offset, denominator);\\n        if (mulmod(x, 1 << offset, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y` as 2 uint256\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @return prod0 The least significant 256 bits of the product\\n     * @return prod1 The most significant 256 bits of the product\\n     */\\n    function _getMulProds(uint256 x, uint256 y) private pure returns (uint256 prod0, uint256 prod1) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y / denominator` with full precision\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @param prod0 The least significant 256 bits of the product\\n     * @param prod1 The most significant 256 bits of the product\\n     * @return result The result as an uint256\\n     */\\n    function _getEndOfDivRoundDown(uint256 x, uint256 y, uint256 denominator, uint256 prod0, uint256 prod1)\\n        private\\n        pure\\n        returns (uint256 result)\\n    {\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n        } else {\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0\\n            if (prod1 >= denominator) revert Uint256x256Math__MulDivOverflow();\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1\\n            // See https://cs.stackexchange.com/q/138556/92363\\n            unchecked {\\n                // Does not overflow because the denominator cannot be zero at this stage in the function\\n                uint256 lpotdod = denominator & (~denominator + 1);\\n                assembly {\\n                    // Divide denominator by lpotdod.\\n                    denominator := div(denominator, lpotdod)\\n\\n                    // Divide [prod1 prod0] by lpotdod.\\n                    prod0 := div(prod0, lpotdod)\\n\\n                    // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one\\n                    lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n                }\\n\\n                // Shift in bits from prod1 into prod0\\n                prod0 |= prod1 * lpotdod;\\n\\n                // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n                // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n                // four bits. That is, denominator * inv = 1 mod 2^4\\n                uint256 inverse = (3 * denominator) ^ 2;\\n\\n                // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n                // in modular arithmetic, doubling the correct bits in each step\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n                // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n                // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n                // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n                // is no longer required.\\n                result = prod0 * inverse;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b2dfaa69d28844cefe6e1b151df9b794e3425b920c9b5f5064a40cbeca36e41\",\"license\":\"MIT\"},\"contracts/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        public\\n        virtual\\n    {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(\\\"1\\\"),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4070106775a06b95735c7f7903435cf94cd91c9660c18a39035296e9807f9096\",\"license\":\"AGPL-3.0-only\"},\"contracts/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success :=\\n                and(\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                    // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                    // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                    // Counterintuitively, this call must be positioned second to the or() call in the\\n                    // surrounding and() call or else returndatasize() will be zero during the computation.\\n                    call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n                )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(ERC20 token, address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success :=\\n                and(\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                    // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                    // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                    // Counterintuitively, this call must be positioned second to the or() call in the\\n                    // surrounding and() call or else returndatasize() will be zero during the computation.\\n                    call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n                )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(ERC20 token, address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success :=\\n                and(\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                    // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                    // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                    // Counterintuitively, this call must be positioned second to the or() call in the\\n                    // surrounding and() call or else returndatasize() will be zero during the computation.\\n                    call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n                )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1c5c5df70ed4d180b6b5fff27076dbdd13ded46887af15771bac3716f5231166\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061028c5760003560e01c80639ed975f71161015a578063d505accf116100c1578063f2fde38b1161007a578063f2fde38b14610990578063f4a0f916146109b9578063f9f92be4146109e4578063fbfa77cf14610a21578063fd8c4af014610a4c578063ff94e67414610a7757610293565b8063d505accf14610891578063d5abeb01146108ba578063dd62ed3e146108e5578063e7b77f7014610922578063eff260b31461094b578063f117f0031461097457610293565b8063b3f0067411610113578063b3f00674146107a3578063b99ef9a3146107ce578063bacbbfd4146107f9578063bc1fdc8c14610824578063c5bf38321461084f578063c9567bf91461087a57610293565b80639ed975f7146106a5578063a0cf0aea146106ce578063a64e4f8a146106f9578063a8aa1b3114610724578063a9059cbb1461074f578063b05dba961461078c57610293565b80635948a60f116101fe5780637ddbda4b116101b75780637ddbda4b146105935780637ecebe00146105be5780637f4aeb1a146105fb578063810fa0d3146106125780638da5cb5b1461064f57806395d89b411461067a57610293565b80635948a60f146104a757806359f571e8146104d25780635bd87291146104fd57806370a0823114610514578063715018a6146105515780637be8021a1461056857610293565b806323b872dd1161025057806323b872dd146103815780632a33d6b2146103be578063313ce567146103e957806334e73122146104145780633644e515146104515780634ada218b1461047c57610293565b806306fdde0314610298578063095ea7b3146102c357806318160ddd1461030057806321a21fe11461032b578063222c97771461035657610293565b3661029357005b600080fd5b3480156102a457600080fd5b506102ad610aa2565b6040516102ba9190613d1c565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e59190613de6565b610b30565b6040516102f79190613e41565b60405180910390f35b34801561030c57600080fd5b50610315610c22565b6040516103229190613e6b565b60405180910390f35b34801561033757600080fd5b50610340610c28565b60405161034d9190613e6b565b60405180910390f35b34801561036257600080fd5b5061036b610c2e565b6040516103789190613e6b565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a39190613e86565b610c34565b6040516103b59190613e41565b60405180910390f35b3480156103ca57600080fd5b506103d3610fc6565b6040516103e09190613e6b565b60405180910390f35b3480156103f557600080fd5b506103fe61109e565b60405161040b9190613ef5565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190613f10565b6110c2565b6040516104489190613e6b565b60405180910390f35b34801561045d57600080fd5b5061046661112c565b6040516104739190613f69565b60405180910390f35b34801561048857600080fd5b50610491611189565b60405161049e9190613e41565b60405180910390f35b3480156104b357600080fd5b506104bc61119c565b6040516104c99190613e41565b60405180910390f35b3480156104de57600080fd5b506104e76111af565b6040516104f49190613fe3565b60405180910390f35b34801561050957600080fd5b506105126111d5565b005b34801561052057600080fd5b5061053b60048036038101906105369190613ffe565b6114dd565b6040516105489190613e6b565b60405180910390f35b34801561055d57600080fd5b506105666114f5565b005b34801561057457600080fd5b5061057d611509565b60405161058a9190614049565b60405180910390f35b34801561059f57600080fd5b506105a861151e565b6040516105b59190613e6b565b60405180910390f35b3480156105ca57600080fd5b506105e560048036038101906105e09190613ffe565b611524565b6040516105f29190613e6b565b60405180910390f35b34801561060757600080fd5b5061061061153c565b005b34801561061e57600080fd5b5061063960048036038101906106349190613f10565b611b7e565b6040516106469190613e6b565b60405180910390f35b34801561065b57600080fd5b50610664611be9565b6040516106719190614073565b60405180910390f35b34801561068657600080fd5b5061068f611c13565b60405161069c9190613d1c565b60405180910390f35b3480156106b157600080fd5b506106cc60048036038101906106c7919061408e565b611ca1565b005b3480156106da57600080fd5b506106e3611d03565b6040516106f09190614073565b60405180910390f35b34801561070557600080fd5b5061070e611d27565b60405161071b9190613e41565b60405180910390f35b34801561073057600080fd5b50610739611d3a565b60405161074691906140dc565b60405180910390f35b34801561075b57600080fd5b5061077660048036038101906107719190613de6565b611d60565b6040516107839190613e41565b60405180910390f35b34801561079857600080fd5b506107a1611eda565b005b3480156107af57600080fd5b506107b86121ec565b6040516107c59190614073565b60405180910390f35b3480156107da57600080fd5b506107e36121fb565b6040516107f09190614049565b60405180910390f35b34801561080557600080fd5b5061080e612210565b60405161081b9190614049565b60405180910390f35b34801561083057600080fd5b50610839612225565b6040516108469190614049565b60405180910390f35b34801561085b57600080fd5b5061086461223a565b6040516108719190614114565b60405180910390f35b34801561088657600080fd5b5061088f61224e565b005b34801561089d57600080fd5b506108b860048036038101906108b39190614187565b612273565b005b3480156108c657600080fd5b506108cf61256c565b6040516108dc9190613e6b565b60405180910390f35b3480156108f157600080fd5b5061090c60048036038101906109079190614229565b612572565b6040516109199190613e6b565b60405180910390f35b34801561092e57600080fd5b5061094960048036038101906109449190613ffe565b612597565b005b34801561095757600080fd5b50610972600480360381019061096d9190614295565b6125e3565b005b61098e60048036038101906109899190614516565b612623565b005b34801561099c57600080fd5b506109b760048036038101906109b29190613ffe565b6128f7565b005b3480156109c557600080fd5b506109ce61297b565b6040516109db9190614049565b60405180910390f35b3480156109f057600080fd5b50610a0b6004803603810190610a069190613ffe565b612990565b604051610a189190613e41565b60405180910390f35b348015610a2d57600080fd5b50610a366129b0565b604051610a439190614073565b60405180910390f35b348015610a5857600080fd5b50610a616129d6565b604051610a6e9190613e6b565b60405180910390f35b348015610a8357600080fd5b50610a8c6129dc565b604051610a999190614049565b60405180910390f35b60008054610aaf90614614565b80601f0160208091040260200160405190810160405280929190818152602001828054610adb90614614565b8015610b285780601f10610afd57610100808354040283529160200191610b28565b820191906000526020600020905b815481529060010190602001808311610b0b57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610c109190613e6b565b60405180910390a36001905092915050565b60025481565b600f5481565b60115481565b6000801515601460009054906101000a900460ff1615151415610c8a573073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610c8957600080fd5b5b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015610d2e5750601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6490614692565b60405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ea2578281610e2191906146e1565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ef191906146e1565b925050819055506000610f05338686612a74565b905080600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610fb19190613e6b565b60405180910390a36001925050509392505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e380f2600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601060009054906101000a900462ffffff166040518363ffffffff1660e01b8152600401611058929190614715565b602060405180830381865afa158015611075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110999190614753565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806110f46103e86110e685670de0b6b3a764000061309190919063ffffffff16565b6130a790919063ffffffff16565b9050611123670de0b6b3a7640000611115838761309190919063ffffffff16565b6130a790919063ffffffff16565b91505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000046146111625761115d6130bd565b611184565b7f00000000000000000000000000000000000000000000000000000000000000005b905090565b601460009054906101000a900460ff1681565b600b60149054906101000a900460ff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900462ffffff1662ffffff166111f46129dc565b62ffffff1614611239576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611230906147cc565b60405180910390fd5b6000600167ffffffffffffffff811115611256576112556142da565b5b6040519080825280602002602001820160405280156112845781602001602082028036833780820191505090505b5090506000600167ffffffffffffffff8111156112a4576112a36142da565b5b6040519080825280602002602001820160405280156112d25781602001602082028036833780820191505090505b509050601060039054906101000a900462ffffff1662ffffff1681600081518110611300576112ff6147ec565b5b6020026020010181815250506001600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e30601060039054906101000a900462ffffff166040518363ffffffff1660e01b815260040161137b92919061484c565b602060405180830381865afa158015611398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bc9190614753565b6113c691906146e1565b826000815181106113da576113d96147ec565b5b602002602001018181525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9939f5e303084866040518563ffffffff1660e01b81526004016114479493929190614933565b6000604051808303816000875af1158015611466573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061148f9190614a5e565b506114d930600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613149565b5050565b60036020528060005260406000206000915090505481565b6114fd613219565b6115076000613297565b565b601260009054906101000a900462ffffff1681565b600e5481565b60056020528060005260406000206000915090505481565b6000600b60179054906101000a900461ffff1661ffff16148061158057506115626129dc565b62ffffff16601060009054906101000a900462ffffff1662ffffff16145b156115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790614af3565b60405180910390fd5b6013600c546115cd6129dc565b62ffffff166115dc91906146e1565b1180156115f55750600b60149054906101000a900460ff165b15611b41576001600b60166101000a81548160ff02191690831515021790555061161d61335d565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116789190614073565b602060405180830381865afa158015611695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b99190614753565b90506000600e5460016116ca6129dc565b6116d49190614b13565b600d60009054906101000a900462ffffff166116f09190614b4c565b62ffffff166116ff9190614b80565b905060006003600061dead73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826117509190614bda565b60025461175d91906146e1565b9050600061176b8483611b7e565b90506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f96fe925600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166117d98561378a565b6040518363ffffffff1660e01b81526004016117f6929190614c30565b602060405180830381865afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190614c85565b90506118416129dc565b62ffffff168162ffffff1611611857578061186c565b60016118616129dc565b61186b9190614b4c565b5b601060006101000a81548162ffffff021916908362ffffff1602179055506000601060009054906101000a900462ffffff1660020b6118a96129dc565b60020b6118b69190614cb2565b6118bf90614d46565b905060016118cb6129dc565b6118d59190614b4c565b601060036101000a81548162ffffff021916908362ffffff1602179055506000600267ffffffffffffffff8111156119105761190f6142da565b5b60405190808252806020026020018201604052801561193e5781602001602082028036833780820191505090505b5090508181600081518110611956576119556147ec565b5b6020026020010181815250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81600181518110611997576119966147ec565b5b6020026020010181815250506000600267ffffffffffffffff8111156119c0576119bf6142da565b5b6040519080825280602002602001820160405280156119ee5781602001602082028036833780820191505090505b509050600081600081518110611a0757611a066147ec565b5b602002602001018181525050600081600181518110611a2957611a286147ec565b5b6020026020010181815250506000600267ffffffffffffffff811115611a5257611a516142da565b5b604051908082528060200260200182016040528015611a805781602001602082028036833780820191505090505b50905060646050670de0b6b3a7640000611a9a9190614b80565b611aa49190614dbe565b81600081518110611ab857611ab76147ec565b5b60200260200101818152505060646014670de0b6b3a7640000611adb9190614b80565b611ae59190614dbe565b81600181518110611af957611af86147ec565b5b602002602001018181525050611b18838383611b136129dc565b6137b1565b6000600b60166101000a81548160ff021916908315150217905550505050505050505050611b7c565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7390614e3b565b60405180910390fd5b565b6000818310611bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb990614ecd565b60405180910390fd5b81670de0b6b3a764000084611bd79190614b80565b611be19190614dbe565b905092915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054611c2090614614565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4c90614614565b8015611c995780601f10611c6e57610100808354040283529160200191611c99565b820191906000526020600020905b815481529060010190602001808311611c7c57829003601f168201915b505050505081565b611ca9613219565b600081118015611cba575060638111155b611cf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf090614f39565b60405180910390fd5b80600f8190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600b60159054906101000a900460ff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801515601460009054906101000a900460ff1615151415611db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daf90614fa5565b60405180910390fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e0791906146e1565b925050819055506000611e1b338585612a74565b905080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611ec79190613e6b565b60405180910390a3600191505092915050565b611ee2613219565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612042929190615000565b6020604051808303816000875af1158015612061573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612085919061503e565b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e584b654600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016040518363ffffffff1660e01b815260040161210692919061506b565b600060405180830381600087803b15801561212057600080fd5b505af1158015612134573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e584b654600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016040518363ffffffff1660e01b81526004016121b892919061506b565b600060405180830381600087803b1580156121d257600080fd5b505af11580156121e6573d6000803e3d6000fd5b50505050565b60006121f6611be9565b905090565b600b60199054906101000a900462ffffff1681565b601060039054906101000a900462ffffff1681565b601060009054906101000a900462ffffff1681565b600b60179054906101000a900461ffff1681565b612256613219565b6001601460006101000a81548160ff021916908315150217905550565b428410156122b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ad906150e0565b60405180910390fd5b600060016122c261112c565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98a8a8a600560008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558b60405160200161234a96959493929190615100565b604051602081830303815290604052805190602001206040516020016123719291906151d9565b60405160208183030381529060405280519060200120858585604051600081526020016040526040516123a79493929190615210565b6020604051602081039080840390855afa1580156123c9573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561243d57508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61247c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612473906152a1565b60405180910390fd5b85600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258760405161255b9190613e6b565b60405180910390a350505050505050565b60135481565b6004602052816000526040600020602052806000526040600020600091509150505481565b61259f613219565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6125eb613219565b81600b60146101000a81548160ff02191690831515021790555080600b60156101000a81548160ff0219169083151502179055505050565b61262b613219565b600c601260009054906101000a900462ffffff1662ffffff1610612684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267b9061530d565b60405180910390fd5b6000601260009054906101000a900462ffffff1662ffffff1614156128535780600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317f11ecc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b69190615359565b600b60176101000a81548161ffff021916908361ffff1602179055506127da6129dc565b600b60196101000a81548162ffffff021916908362ffffff16021790555060016128026129dc565b61280c9190614b13565b62ffffff16600c8190555061281f611eda565b6104b061282a6129dc565b6128349190614b13565b600d60006101000a81548162ffffff021916908362ffffff1602179055505b61286b30600c6013546128669190614dbe565b613a7e565b6001600b60166101000a81548160ff0219169083151502179055506128998484846128946129dc565b6137b1565b6000600b60166101000a81548160ff0219169083151502179055506001601260009054906101000a900462ffffff166128d29190614b13565b601260006101000a81548162ffffff021916908362ffffff1602179055505050505050565b6128ff613219565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561296f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612966906153f8565b60405180910390fd5b61297881613297565b50565b600d60009054906101000a900462ffffff1681565b60156020528060005260406000206000915054906101000a900460ff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dbe65edc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6f9190614c85565b905090565b6000819050600b60159054906101000a900460ff168015612aa25750600b60169054906101000a900460ff16155b1561308a57600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015612b3057503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15612d70576000612b4282600f6110c2565b90506000612b5183600a6110c2565b90508160036000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bc49190614bda565b92505081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612c4a9190613e6b565b60405180910390a38060036000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612cc39190614bda565b92505081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612d499190613e6b565b60405180910390a38183612d5d91906146e1565b92508083612d6b91906146e1565b925050505b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015612e1a5750600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15613089576000601060009054906101000a900462ffffff1662ffffff16612e406129dc565b62ffffff161415612f6b57612e57826011546110c2565b90508060036000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612eca9190614bda565b92505081905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612f509190613e6b565b60405180910390a38082612f6491906146e1565b9150613087565b612f77826011546110c2565b90508060036000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fea9190614bda565b92505081905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516130709190613e6b565b60405180910390a3808261308491906146e1565b91505b505b5b9392505050565b6000818361309f9190614b80565b905092915050565b600081836130b59190614dbe565b905092915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516130ef91906154b7565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6463060405160200161312e9594939291906154ce565b60405160208183030381529060405280519060200120905090565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461319891906146e1565b9250508190555080600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161320d9190613e6b565b60405180910390a35050565b613221613b4e565b73ffffffffffffffffffffffffffffffffffffffff1661323f611be9565b73ffffffffffffffffffffffffffffffffffffffff1614613295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161328c9061556d565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600c5461336b6129dc565b62ffffff1661337a91906146e1565b90506000601060009054906101000a900462ffffff1662ffffff16146133ac576001816133a79190614bda565b6133ae565b805b9050600c54601060039054906101000a900462ffffff1662ffffff16101580156133fb575080600c546133e19190614bda565b601060039054906101000a900462ffffff1662ffffff1611155b15613409576001915061343c565b6000601060009054906101000a900462ffffff1662ffffff16111561343b576000915080806134379061558d565b9150505b5b60008167ffffffffffffffff811115613458576134576142da565b5b6040519080825280602002602001820160405280156134865781602001602082028036833780820191505090505b50905060008267ffffffffffffffff8111156134a5576134a46142da565b5b6040519080825280602002602001820160405280156134d35781602001602082028036833780820191505090505b50905060005b838110156135215780600c546134ef9190614bda565b828281518110613502576135016147ec565b5b60200260200101818152505080806135199061558d565b9150506134d9565b506000601060009054906101000a900462ffffff1662ffffff16146135cc57601060009054906101000a900462ffffff1662ffffff16816001835161356691906146e1565b81518110613577576135766147ec565b5b602002602001018181525050836135cb57601060039054906101000a900462ffffff1662ffffff16816002856135ad91906146e1565b815181106135be576135bd6147ec565b5b6020026020010181815250505b5b6135d46129dc565b62ffffff16600c8190555060005b838110156136d9576000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e3085858151811061363d5761363c6147ec565b5b60200260200101516040518363ffffffff1660e01b81526004016136629291906155d6565b602060405180830381865afa15801561367f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a39190614753565b9050808483815181106136b9576136b86147ec565b5b6020026020010181815250505080806136d19061558d565b9150506135e2565b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9939f5e303084866040518563ffffffff1660e01b815260040161373b9493929190614933565b6000604051808303816000875af115801561375a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906137839190614a5e565b5050505050565b60006137aa6080670de0b6b3a764000084613b569092919063ffffffff16565b9050919050565b6000600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016138509190614073565b602060405180830381865afa15801561386d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138919190614753565b905060006064600f54846138a59190614b80565b6138af9190614dbe565b905060006064600f54846138c39190614b80565b6138cd9190614dbe565b9050600080604051806101e001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001600b60179054906101000a900461ffff1661ffff1681526020018781526020018681526020018581526020018481526020018862ffffff1681526020018381526020018b81526020018a81526020018981526020013073ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152509050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3c7271a826040518263ffffffff1660e01b8152600401613a2491906158ad565b6000604051808303816000875af1158015613a43573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613a6c9190615966565b50505050505050505050505050505050565b8060026000828254613a909190614bda565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613b429190613e6b565b60405180910390a35050565b600033905090565b60008060008460ff1686901b91508460ff166101000361ffff1686901c9050613b89868660ff166001901b868585613b94565b925050509392505050565b600080821415613bb657838381613bae57613bad614d8f565b5b049050613c7a565b838210613bef576040517f13eae71500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848688099050838111830392508084039350600060018619018616905080860495508085049450600181826000030401905080840285179450600060028760030218905080870260020381029050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080860293505050505b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613cbd578082015181840152602081019050613ca2565b83811115613ccc576000848401525b50505050565b6000601f19601f8301169050919050565b6000613cee82613c83565b613cf88185613c8e565b9350613d08818560208601613c9f565b613d1181613cd2565b840191505092915050565b60006020820190508181036000830152613d368184613ce3565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613d7d82613d52565b9050919050565b613d8d81613d72565b8114613d9857600080fd5b50565b600081359050613daa81613d84565b92915050565b6000819050919050565b613dc381613db0565b8114613dce57600080fd5b50565b600081359050613de081613dba565b92915050565b60008060408385031215613dfd57613dfc613d48565b5b6000613e0b85828601613d9b565b9250506020613e1c85828601613dd1565b9150509250929050565b60008115159050919050565b613e3b81613e26565b82525050565b6000602082019050613e566000830184613e32565b92915050565b613e6581613db0565b82525050565b6000602082019050613e806000830184613e5c565b92915050565b600080600060608486031215613e9f57613e9e613d48565b5b6000613ead86828701613d9b565b9350506020613ebe86828701613d9b565b9250506040613ecf86828701613dd1565b9150509250925092565b600060ff82169050919050565b613eef81613ed9565b82525050565b6000602082019050613f0a6000830184613ee6565b92915050565b60008060408385031215613f2757613f26613d48565b5b6000613f3585828601613dd1565b9250506020613f4685828601613dd1565b9150509250929050565b6000819050919050565b613f6381613f50565b82525050565b6000602082019050613f7e6000830184613f5a565b92915050565b6000819050919050565b6000613fa9613fa4613f9f84613d52565b613f84565b613d52565b9050919050565b6000613fbb82613f8e565b9050919050565b6000613fcd82613fb0565b9050919050565b613fdd81613fc2565b82525050565b6000602082019050613ff86000830184613fd4565b92915050565b60006020828403121561401457614013613d48565b5b600061402284828501613d9b565b91505092915050565b600062ffffff82169050919050565b6140438161402b565b82525050565b600060208201905061405e600083018461403a565b92915050565b61406d81613d72565b82525050565b60006020820190506140886000830184614064565b92915050565b6000602082840312156140a4576140a3613d48565b5b60006140b284828501613dd1565b91505092915050565b60006140c682613fb0565b9050919050565b6140d6816140bb565b82525050565b60006020820190506140f160008301846140cd565b92915050565b600061ffff82169050919050565b61410e816140f7565b82525050565b60006020820190506141296000830184614105565b92915050565b61413881613ed9565b811461414357600080fd5b50565b6000813590506141558161412f565b92915050565b61416481613f50565b811461416f57600080fd5b50565b6000813590506141818161415b565b92915050565b600080600080600080600060e0888a0312156141a6576141a5613d48565b5b60006141b48a828b01613d9b565b97505060206141c58a828b01613d9b565b96505060406141d68a828b01613dd1565b95505060606141e78a828b01613dd1565b94505060806141f88a828b01614146565b93505060a06142098a828b01614172565b92505060c061421a8a828b01614172565b91505092959891949750929550565b600080604083850312156142405761423f613d48565b5b600061424e85828601613d9b565b925050602061425f85828601613d9b565b9150509250929050565b61427281613e26565b811461427d57600080fd5b50565b60008135905061428f81614269565b92915050565b600080604083850312156142ac576142ab613d48565b5b60006142ba85828601614280565b92505060206142cb85828601614280565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61431282613cd2565b810181811067ffffffffffffffff82111715614331576143306142da565b5b80604052505050565b6000614344613d3e565b90506143508282614309565b919050565b600067ffffffffffffffff8211156143705761436f6142da565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61439981614386565b81146143a457600080fd5b50565b6000813590506143b681614390565b92915050565b60006143cf6143ca84614355565b61433a565b905080838252602082019050602084028301858111156143f2576143f1614381565b5b835b8181101561441b578061440788826143a7565b8452602084019350506020810190506143f4565b5050509392505050565b600082601f83011261443a576144396142d5565b5b813561444a8482602086016143bc565b91505092915050565b600067ffffffffffffffff82111561446e5761446d6142da565b5b602082029050602081019050919050565b600061449261448d84614453565b61433a565b905080838252602082019050602084028301858111156144b5576144b4614381565b5b835b818110156144de57806144ca8882613dd1565b8452602084019350506020810190506144b7565b5050509392505050565b600082601f8301126144fd576144fc6142d5565b5b813561450d84826020860161447f565b91505092915050565b600080600080600060a0868803121561453257614531613d48565b5b600061454088828901613d9b565b955050602086013567ffffffffffffffff81111561456157614560613d4d565b5b61456d88828901614425565b945050604086013567ffffffffffffffff81111561458e5761458d613d4d565b5b61459a888289016144e8565b935050606086013567ffffffffffffffff8111156145bb576145ba613d4d565b5b6145c7888289016144e8565b92505060806145d888828901613d9b565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061462c57607f821691505b602082108114156146405761463f6145e5565b5b50919050565b7f6572726f723a20696e76616c6964206c697175696469747920706f6f6c000000600082015250565b600061467c601d83613c8e565b915061468782614646565b602082019050919050565b600060208201905081810360008301526146ab8161466f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006146ec82613db0565b91506146f783613db0565b92508282101561470a576147096146b2565b5b828203905092915050565b600060408201905061472a60008301856140cd565b614737602083018461403a565b9392505050565b60008151905061474d81613dba565b92915050565b60006020828403121561476957614768613d48565b5b60006147778482850161473e565b91505092915050565b7f6163746976652062696e206d75737420626520666c6f6f720000000000000000600082015250565b60006147b6601883613c8e565b91506147c182614780565b602082019050919050565b600060208201905081810360008301526147e5816147a9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061483661483161482c8461402b565b613f84565b613db0565b9050919050565b6148468161481b565b82525050565b60006040820190506148616000830185614064565b61486e602083018461483d565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6148aa81613db0565b82525050565b60006148bc83836148a1565b60208301905092915050565b6000602082019050919050565b60006148e082614875565b6148ea8185614880565b93506148f583614891565b8060005b8381101561492657815161490d88826148b0565b9750614918836148c8565b9250506001810190506148f9565b5085935050505092915050565b60006080820190506149486000830187614064565b6149556020830186614064565b818103604083015261496781856148d5565b9050818103606083015261497b81846148d5565b905095945050505050565b600067ffffffffffffffff8211156149a1576149a06142da565b5b602082029050602081019050919050565b6000815190506149c18161415b565b92915050565b60006149da6149d584614986565b61433a565b905080838252602082019050602084028301858111156149fd576149fc614381565b5b835b81811015614a265780614a1288826149b2565b8452602084019350506020810190506149ff565b5050509392505050565b600082601f830112614a4557614a446142d5565b5b8151614a558482602086016149c7565b91505092915050565b600060208284031215614a7457614a73613d48565b5b600082015167ffffffffffffffff811115614a9257614a91613d4d565b5b614a9e84828501614a30565b91505092915050565b7f417420666c6f6f72000000000000000000000000000000000000000000000000600082015250565b6000614add600883613c8e565b9150614ae882614aa7565b602082019050919050565b60006020820190508181036000830152614b0c81614ad0565b9050919050565b6000614b1e8261402b565b9150614b298361402b565b92508262ffffff03821115614b4157614b406146b2565b5b828201905092915050565b6000614b578261402b565b9150614b628361402b565b925082821015614b7557614b746146b2565b5b828203905092915050565b6000614b8b82613db0565b9150614b9683613db0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614bcf57614bce6146b2565b5b828202905092915050565b6000614be582613db0565b9150614bf083613db0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614c2557614c246146b2565b5b828201905092915050565b6000604082019050614c4560008301856140cd565b614c526020830184613e5c565b9392505050565b614c628161402b565b8114614c6d57600080fd5b50565b600081519050614c7f81614c59565b92915050565b600060208284031215614c9b57614c9a613d48565b5b6000614ca984828501614c70565b91505092915050565b6000614cbd82614386565b9150614cc883614386565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615614d0357614d026146b2565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615614d3b57614d3a6146b2565b5b828203905092915050565b6000614d5182614386565b91507f8000000000000000000000000000000000000000000000000000000000000000821415614d8457614d836146b2565b5b816000039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614dc982613db0565b9150614dd483613db0565b925082614de457614de3614d8f565b5b828204905092915050565b7f4f7574206f662072616e67650000000000000000000000000000000000000000600082015250565b6000614e25600c83613c8e565b9150614e3082614def565b602082019050919050565b60006020820190508181036000830152614e5481614e18565b9050919050565b7f455448206d757374206265206c657373207468616e20746f74616c20746f6b6560008201527f6e73000000000000000000000000000000000000000000000000000000000000602082015250565b6000614eb7602283613c8e565b9150614ec282614e5b565b604082019050919050565b60006020820190508181036000830152614ee681614eaa565b9050919050565b7f6f7574206f6620736c6970706167652072616e67652028312d39392900000000600082015250565b6000614f23601c83613c8e565b9150614f2e82614eed565b602082019050919050565b60006020820190508181036000830152614f5281614f16565b9050919050565b7f54726164696e67206973206e6f7420656e61626c656400000000000000000000600082015250565b6000614f8f601683613c8e565b9150614f9a82614f59565b602082019050919050565b60006020820190508181036000830152614fbe81614f82565b9050919050565b6000819050919050565b6000614fea614fe5614fe084614fc5565b613f84565b613db0565b9050919050565b614ffa81614fcf565b82525050565b60006040820190506150156000830185614064565b6150226020830184614ff1565b9392505050565b60008151905061503881614269565b92915050565b60006020828403121561505457615053613d48565b5b600061506284828501615029565b91505092915050565b60006040820190506150806000830185614064565b61508d6020830184613e32565b9392505050565b7f5045524d49545f444541444c494e455f45585049524544000000000000000000600082015250565b60006150ca601783613c8e565b91506150d582615094565b602082019050919050565b600060208201905081810360008301526150f9816150bd565b9050919050565b600060c0820190506151156000830189613f5a565b6151226020830188614064565b61512f6040830187614064565b61513c6060830186613e5c565b6151496080830185613e5c565b61515660a0830184613e5c565b979650505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006151a2600283615161565b91506151ad8261516c565b600282019050919050565b6000819050919050565b6151d36151ce82613f50565b6151b8565b82525050565b60006151e482615195565b91506151f082856151c2565b60208201915061520082846151c2565b6020820191508190509392505050565b60006080820190506152256000830187613f5a565b6152326020830186613ee6565b61523f6040830185613f5a565b61524c6060830184613f5a565b95945050505050565b7f494e56414c49445f5349474e4552000000000000000000000000000000000000600082015250565b600061528b600e83613c8e565b915061529682615255565b602082019050919050565b600060208201905081810360008301526152ba8161527e565b9050919050565b7f696e697469616c697a6564000000000000000000000000000000000000000000600082015250565b60006152f7600b83613c8e565b9150615302826152c1565b602082019050919050565b60006020820190508181036000830152615326816152ea565b9050919050565b615336816140f7565b811461534157600080fd5b50565b6000815190506153538161532d565b92915050565b60006020828403121561536f5761536e613d48565b5b600061537d84828501615344565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006153e2602683613c8e565b91506153ed82615386565b604082019050919050565b60006020820190508181036000830152615411816153d5565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461544581614614565b61544f8186615418565b9450600182166000811461546a576001811461547b576154ae565b60ff198316865281860193506154ae565b61548485615423565b60005b838110156154a657815481890152600182019150602081019050615487565b838801955050505b50505092915050565b60006154c38284615438565b915081905092915050565b600060a0820190506154e36000830188613f5a565b6154f06020830187613f5a565b6154fd6040830186613f5a565b61550a6060830185613e5c565b6155176080830184614064565b9695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000615557602083613c8e565b915061556282615521565b602082019050919050565b600060208201905081810360008301526155868161554a565b9050919050565b600061559882613db0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156155cb576155ca6146b2565b5b600182019050919050565b60006040820190506155eb6000830185614064565b6155f86020830184613e5c565b9392505050565b600061560a82613fb0565b9050919050565b61561a816155ff565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61565581614386565b82525050565b6000615667838361564c565b60208301905092915050565b6000602082019050919050565b600061568b82615620565b615695818561562b565b93506156a08361563c565b8060005b838110156156d15781516156b8888261565b565b97506156c383615673565b9250506001810190506156a4565b5085935050505092915050565b600082825260208201905092915050565b60006156fa82614875565b61570481856156de565b935061570f83614891565b8060005b8381101561574057815161572788826148b0565b9750615732836148c8565b925050600181019050615713565b5085935050505092915050565b61575681613d72565b82525050565b60006101e0830160008301516157756000860182615611565b5060208301516157886020860182615611565b50604083015161579b60408601826148a1565b5060608301516157ae60608601826148a1565b5060808301516157c160808601826148a1565b5060a08301516157d460a08601826148a1565b5060c08301516157e760c08601826148a1565b5060e08301516157fa60e08601826148a1565b5061010083015161580f6101008601826148a1565b506101208301518482036101208601526158298282615680565b91505061014083015184820361014086015261584582826156ef565b91505061016083015184820361016086015261586182826156ef565b91505061018083015161587861018086018261574d565b506101a083015161588d6101a086018261574d565b506101c08301516158a26101c08601826148a1565b508091505092915050565b600060208201905081810360008301526158c7818461575c565b905092915050565b60006158e26158dd84614453565b61433a565b9050808382526020820190506020840283018581111561590557615904614381565b5b835b8181101561592e578061591a888261473e565b845260208401935050602081019050615907565b5050509392505050565b600082601f83011261594d5761594c6142d5565b5b815161595d8482602086016158cf565b91505092915050565b60008060008060008060c0878903121561598357615982613d48565b5b600061599189828a0161473e565b96505060206159a289828a0161473e565b95505060406159b389828a0161473e565b94505060606159c489828a0161473e565b935050608087015167ffffffffffffffff8111156159e5576159e4613d4d565b5b6159f189828a01615938565b92505060a087015167ffffffffffffffff811115615a1257615a11613d4d565b5b615a1e89828a01615938565b915050929550929550929556fea264697066735822122041cf5bb005c9b99a9bb05b24f4734d83d9657eba2c5c85e39da385a56b01b52c64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "disableRebalances(bool,bool)": {
        "params": {
          "fees": "bool fees enabled?",
          "rebalances": "bool rebalances enabled?."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "stakeFee": {
        "details": "updated fee breakdown"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approvals()": {
        "notice": "approvals for joe router."
      },
      "disableRebalances(bool,bool)": {
        "notice": "only admin function to disable rebalances and fees in case of bugs."
      },
      "getActiveBinId()": {
        "notice": "Get's the pool active bin id."
      },
      "getAverageTokenPrice(uint256,uint256)": {
        "notice": "Helper func."
      },
      "getFloorPrice()": {
        "notice": "returns the current floor price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6648,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6650,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6654,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6658,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6664,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6672,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 567,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "joeRouter",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ILBRouter)4784"
      },
      {
        "astId": 570,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "pair",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ILBPair)4242"
      },
      {
        "astId": 572,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "vault",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 576,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "founderWallet",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 578,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "devWallet",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 580,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "rebalancesEnabled",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 582,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "feesEnabled",
        "offset": 21,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 584,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "isRebalancing",
        "offset": 22,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 586,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "binStep",
        "offset": 23,
        "slot": "11",
        "type": "t_uint16"
      },
      {
        "astId": 588,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "startBin",
        "offset": 25,
        "slot": "11",
        "type": "t_uint24"
      },
      {
        "astId": 590,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "lastRecordedActiveBin",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 592,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "maxBin",
        "offset": 0,
        "slot": "13",
        "type": "t_uint24"
      },
      {
        "astId": 594,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "xPerBin",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 597,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "slippageToleranceMultiplier",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 599,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "floorLiquidityBin",
        "offset": 0,
        "slot": "16",
        "type": "t_uint24"
      },
      {
        "astId": 601,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "tightLiqBin",
        "offset": 3,
        "slot": "16",
        "type": "t_uint24"
      },
      {
        "astId": 605,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "stakeFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 607,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "seedLiquidityTimes",
        "offset": 0,
        "slot": "18",
        "type": "t_uint24"
      },
      {
        "astId": 609,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "maxSupply",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 611,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "tradingEnabled",
        "offset": 0,
        "slot": "20",
        "type": "t_bool"
      },
      {
        "astId": 615,
        "contract": "contracts/moat/LADDER.sol:LADDER",
        "label": "blacklist",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILBPair)4242": {
        "encoding": "inplace",
        "label": "contract ILBPair",
        "numberOfBytes": "20"
      },
      "t_contract(ILBRouter)4784": {
        "encoding": "inplace",
        "label": "contract ILBRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}